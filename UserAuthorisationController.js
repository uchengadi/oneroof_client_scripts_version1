/*
 * File: app/controller/UserAuthorisationController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('cobuy.controller.UserAuthorisationController', {
    extend: 'Ext.app.Controller',

    models: [
        'AuthAssignment',
        'AuthItem'
    ],
    stores: [
        'AuthorizationItems',
        'AuthItemsAssignment'
    ],
    views: [
        'AuthAssignmentMain',
        'NewUserAssignmentWin',
        'EditUserAssignmentWin',
        'UserAuthItemAssignmentWin'
    ],

    refs: [
        {
            ref: 'allUserAuthorizationGrid',
            selector: 'authassignmentmain grid'
        }
    ],

    onUserAuthorizationButtonClick: function(button, e, eOpts) {
        var grid = this.getAllUserAuthorizationGrid();
        		var record = grid.getSelectionModel().getSelection();


        		if(record[0]){
        			var win = Ext.create('cobuy.view.UserAuthItemAssignmentWin');
        			var form = win.down('form');
        			var role_container =form.down('#roleCheckbox');
        			var task_container =form.down('#taskCheckbox');
        			var operation_container =form.down('#operationCheckbox');
        			//user_name = record[0].get('firstname')+ ' ' + record[0].get('middlename') + ' ' + record[0].get('lastname');
        			var user_id = record[0].get('userid');



        			Ext.Ajax.request({
                      url: '/cobuy/index.php?r=Authitem/Listalluserauthitems',
        				params: {
        					user_id: record[0].get('userid')
        					//role_type: record[0].get('type')
        				},
                     //success or failure

        			success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);


        				//checkboxgroup for operations
        					var checkboxGroup_operation = {
                                 xtype: 'checkboxgroup',
                                 columns: 1,
                                  vertical: true,
                                  width: 500,
                                 //fieldLabel: 'Authorisation',
                                 //name: 'recipients',
                                 style: {
                                       padding: '5px 10px 5px 10px'
                                 },
                           items: []

                      };

        			  //checkboxgroup for task
        			  var checkboxGroup_task = {
                                 xtype: 'checkboxgroup',
                                 columns: 1,
                                  vertical: true,
                                  width: 500,
                                 //fieldLabel: 'Authorisation',
                                 //name: 'recipients',
                                 style: {
                                       padding: '5px 10px 5px 10px'
                                 },
                           items: []

                      };

        			  //checkboxgroup for operations
        			  var checkboxGroup_role = {
                                 xtype: 'checkboxgroup',
                                 columns: 1,
                                  vertical: true,
                                  width: 500,
                                 //fieldLabel: 'Authorisation',
                                 //name: 'recipients',
                                 style: {
                                       padding: '5px 10px 5px 10px'
                                 },
                           items: []

                      };

                       var i, j, k,  len = jsonResponse.authitems.length, item, assignments, length = jsonResponse.assignments.length, name, select_value, operations,
        			   role, tasks, user_role, user_name, user, status;

        			   user = jsonResponse.user[0];
        			   user_role = user.role;
        			   user_name = user.firstname + ' ' + user.middlename + ' ' + user.lastname;
        			   status = user.status;

        			  for (i=0; i < len; i++) {
        					item = jsonResponse.authitems[i];
        					if(item.type == 0) {
        						for( j = 0; j < length; j++){
        							assignments = jsonResponse.assignments[j];
        							if(assignments.itemname === item.name){
        								item.select_value = assignments.itemname;
        								name = user_name;
        								role = user_role;
        								status = status;

        							}


        						}//end of the j for loop statement
        						checkboxGroup_operation.items.push({
        							xtype: 'checkbox',
        							boxLabel: item.name,
        							name: 'itemname[]',
        							inputValue: item.name,
        							checked: item.select_value

        						});




        					}//end of the item.type if statement



        			   } //end of the i for-loop
        			   operation_container.add(checkboxGroup_operation);

        			  for (i=0; i < len; i++) {
        					item = jsonResponse.authitems[i];
        					if(item.type == 1) {
        						for( j = 0; j < length; j++){
        							assignments = jsonResponse.assignments[j];
        							if(assignments.itemname === item.name){
        								item.select_value = assignments.itemname;
        								name = user_name;
        								role = user_role;
        								status = status;

        							}


        						}//end of the j for loop statement
        						checkboxGroup_task.items.push({
        							xtype: 'checkbox',
        							boxLabel: item.name,
        							name: 'itemname[]',
        							inputValue: item.name,
        							checked: item.select_value

        						});




        					}//end of the item.type if statement



        			   } //end of the i for loop
        			   task_container.add(checkboxGroup_task);


        			   for (i=0; i < len; i++) {
        					item = jsonResponse.authitems[i];
        					if(item.type == 2) {
        						if(item.name === user_role){
        							continue;
        						}
        						for( j = 0; j < length; j++){
        							assignments = jsonResponse.assignments[j];
        							if(assignments.itemname === item.name){
        								item.select_value = assignments.itemname;
        								name = user_name;
        								role = user_role;
        								status = status;

        							}


        						}//end of the j for loop statement
        						checkboxGroup_role.items.push({
        							xtype: 'checkbox',
        							boxLabel: item.name,
        							name: 'itemname[]',
        							inputValue: item.name,
        							checked: item.select_value

        						});




        					}//end of the item.type if statement



        			   } //end of the i for loop
        			   role_container.add(checkboxGroup_role);



        			   var values = {
        				name: user_name,
        				role: user_role,
        				status: status,
        				userid: user_id

        				};


        		   //form.loadRecord(record[0]);

        		   form.getForm().setValues(values);

        			}



        			});

        			win.show();


        		} else {
        				Ext.Msg.alert('Error', 'Please Select a User Role ');

        		}
    },

    onEditUserAuthorizationButtonClick: function(button, e, eOpts) {
        var grid = this.getAllUserAuthorizationGrid(),
        		record = grid.getSelectionModel().getSelection();

        		if(record[0]) {
        			var editWin = Ext.create('cobuy.view.EditUserAssignmentWin');
        			//editWin.down('form').loadRecord(record[0]);
        			var form = editWin.down('form');
        			var user_id = record[0].get('userid'),
        			item_name = record[0].get('itemname'),
        			rule = record[0].get('bizrule'),
        			rule_data = record[0].get('data');
        			var user_name;


        			Ext.Ajax.request({
                      url: '/cobuy/index.php?r=Authitem/obtainuserforitemedit',
        				params: {
        					user_id: record[0].get('userid')
        					//role_type: record[0].get('type')
        				},
                     //success or failure

        			success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);

        				 user = jsonResponse.user[0];
        				 user_name = user.firstname + ' ' + user.middlename + ' ' + user.lastname;

        				 var values = {
        					username: user_name,
        					itemname: item_name,
        					bizrule: rule,
        					data: rule_data,
        					userid: user_id

        				};


        		   //form.loadRecord(record[0]);

        		   form.getForm().setValues(values);
        			}//end of the success function

        		});


        		editWin.show();
        		} else {
        				Ext.Msg.alert('Error', 'Please Select a user to edit his/her authorisation');
        		}




    },

    onDeleteAuthorizationButtonClick: function(button, e, eOpts) {
        var grid = this.getAllUserAuthorizationGrid();
        		var record= grid.getSelectionModel().getSelection();

        if(record[0]){


        	Ext.Msg.show({
                         title:'Delete?',
                         msg: 'Are you sure you want to delete this User Authorization?',
                         buttons: Ext.Msg.YESNO,
                         icon: Ext.Msg.QUESTION,
                         fn: function (buttonId){
                            if (buttonId == 'yes'){
                                Ext.Ajax.request({
                                    url: '/cobuy/index.php?r=Authitem/deleteoneauthitemassignment',
                                    params: {
                                        id: record[0].get('id')

                                    },
                                    success: function(conn, response, options, eOpts) {

                                        var result = Ext.JSON.decode(conn.responseText);

                                        if (result.success) {

                                            Ext.Msg.alert('Success!', result.msg);
                                            grid.getStore().load();

                                        } else {
                                            var error = Ext.JSON.decode(conn.responseText);
                                            Ext.Msg.alert('Error', error.msg);
                                        }
                                    },
                                    failure: function(conn, response, options, eOpts) {

                                        Ext.Msg.alert('Failure', 'Communication Error');
                                    }
                                });
                            }
                         }
                    });

        }else {
        				Ext.Msg.alert('Error', 'Please Select a User Authorization to delete');
        		}

    },

    onSaveAssignedAuthorizationButtonClick: function(button, e, eOpts) {
        var win = button.up('window'),
        			formPanel = win.down('form'),
        			store = this.getAllUserAuthorizationGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
        					url: '/cobuy/index.php?r=Authitem/assignauthitemstouser',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							store.load();

        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
    },

    onSaveEdittedAuthorizationButtonClick: function(button, e, eOpts) {
        var win = button.up('window'),
        			formPanel = win.down('form'),
        			store = this.getAllUserAuthorizationGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
        					url: '/cobuy/index.php?r=Authitem/updateauthitemassignment',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							store.load();

        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
    },

    onAuthorizationGridpanelItemDblClick: function(dataview, record, item, index, e, eOpts) {
        var grid = this.getAllUserAuthorizationGrid();
        		var record = grid.getSelectionModel().getSelection();


        		if(record[0]){
        			var win = Ext.create('cobuy.view.UserAuthItemAssignmentWin');
        			var form = win.down('form');
        			var role_container =form.down('#roleCheckbox');
        			var task_container =form.down('#taskCheckbox');
        			var operation_container =form.down('#operationCheckbox');
        			//user_name = record[0].get('firstname')+ ' ' + record[0].get('middlename') + ' ' + record[0].get('lastname');
        			var user_id = record[0].get('userid');



        			Ext.Ajax.request({
                      url: '/cobuy/index.php?r=Authitem/Listalluserauthitems',
        				params: {
        					user_id: record[0].get('userid')
        					//role_type: record[0].get('type')
        				},
                     //success or failure

        			success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);


        				//checkboxgroup for operations
        					var checkboxGroup_operation = {
                                 xtype: 'checkboxgroup',
                                 columns: 1,
                                  vertical: true,
                                  width: 500,
                                 //fieldLabel: 'Authorisation',
                                 //name: 'recipients',
                                 style: {
                                       padding: '5px 10px 5px 10px'
                                 },
                           items: []

                      };

        			  //checkboxgroup for task
        			  var checkboxGroup_task = {
                                 xtype: 'checkboxgroup',
                                 columns: 1,
                                  vertical: true,
                                  width: 500,
                                 //fieldLabel: 'Authorisation',
                                 //name: 'recipients',
                                 style: {
                                       padding: '5px 10px 5px 10px'
                                 },
                           items: []

                      };

        			  //checkboxgroup for operations
        			  var checkboxGroup_role = {
                                 xtype: 'checkboxgroup',
                                 columns: 1,
                                  vertical: true,
                                  width: 500,
                                 //fieldLabel: 'Authorisation',
                                 //name: 'recipients',
                                 style: {
                                       padding: '5px 10px 5px 10px'
                                 },
                           items: []

                      };

                       var i, j, k,  len = jsonResponse.authitems.length, item, assignments, length = jsonResponse.assignments.length, name, select_value, operations,
        			   role, tasks, user_role, user_name, user, status;

        			   user = jsonResponse.user[0];
        			   user_role = user.role;
        			   user_name = user.firstname + ' ' + user.middlename + ' ' + user.lastname;
        			   status = user.status;

        			  for (i=0; i < len; i++) {
        					item = jsonResponse.authitems[i];
        					if(item.type == 0) {
        						for( j = 0; j < length; j++){
        							assignments = jsonResponse.assignments[j];
        							if(assignments.itemname === item.name){
        								item.select_value = assignments.itemname;
        								name = user_name;
        								role = user_role;
        								status = status;

        							}


        						}//end of the j for loop statement
        						checkboxGroup_operation.items.push({
        							xtype: 'checkbox',
        							boxLabel: item.name,
        							name: 'itemname[]',
        							inputValue: item.name,
        							checked: item.select_value

        						});




        					}//end of the item.type if statement



        			   } //end of the i for-loop
        			   operation_container.add(checkboxGroup_operation);

        			  for (i=0; i < len; i++) {
        					item = jsonResponse.authitems[i];
        					if(item.type == 1) {
        						for( j = 0; j < length; j++){
        							assignments = jsonResponse.assignments[j];
        							if(assignments.itemname === item.name){
        								item.select_value = assignments.itemname;
        								name = user_name;
        								role = user_role;
        								status = status;

        							}


        						}//end of the j for loop statement
        						checkboxGroup_task.items.push({
        							xtype: 'checkbox',
        							boxLabel: item.name,
        							name: 'itemname[]',
        							inputValue: item.name,
        							checked: item.select_value

        						});




        					}//end of the item.type if statement



        			   } //end of the i for loop
        			   task_container.add(checkboxGroup_task);


        			   for (i=0; i < len; i++) {
        					item = jsonResponse.authitems[i];
        					if(item.type == 2) {
        						if(item.name === user_role){
        							continue;
        						}
        						for( j = 0; j < length; j++){
        							assignments = jsonResponse.assignments[j];
        							if(assignments.itemname === item.name){
        								item.select_value = assignments.itemname;
        								name = user_name;
        								role = user_role;
        								status = status;

        							}


        						}//end of the j for loop statement
        						checkboxGroup_role.items.push({
        							xtype: 'checkbox',
        							boxLabel: item.name,
        							name: 'itemname[]',
        							inputValue: item.name,
        							checked: item.select_value

        						});




        					}//end of the item.type if statement



        			   } //end of the i for loop
        			   role_container.add(checkboxGroup_role);



        			   var values = {
        				name: user_name,
        				role: user_role,
        				status: status,
        				userid: user_id

        				};


        		   //form.loadRecord(record[0]);

        		   form.getForm().setValues(values);

        			}



        			});

        			win.show();


        		} else {
        				Ext.Msg.alert('Error', 'Please Select a User Role ');

        		}
    },

    onAuthAssignmentPanelRender: function(component, eOpts) {
        component.down('grid').getStore().load();
    },

    init: function(application) {
        this.control({
            "authassignmentmain button#assignBtn": {
                click: this.onUserAuthorizationButtonClick
            },
            "authassignmentmain button#editBtn": {
                click: this.onEditUserAuthorizationButtonClick
            },
            "authassignmentmain button#deleteBtn": {
                click: this.onDeleteAuthorizationButtonClick
            },
            "userauthitemassignmentwin button#assignBtn": {
                click: this.onSaveAssignedAuthorizationButtonClick
            },
            "edituserassignmentwin button#editBtn": {
                click: this.onSaveEdittedAuthorizationButtonClick
            },
            "authassignmentmain grid": {
                itemdblclick: this.onAuthorizationGridpanelItemDblClick
            },
            "authassignmentmain": {
                render: this.onAuthAssignmentPanelRender
            }
        });
    }

});
