/*
 * File: app/controller/ProductConstituentsController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('cobuy.controller.ProductConstituentsController', {
    extend: 'Ext.app.Controller',

    models: [
        'ProductConstituent'
    ],
    stores: [
        'ProductConstituents'
    ],
    views: [
        'ProductConstituentMainpanel',
        'NewProductConstituentWin',
        'EditProductConstituentWin',
        'ProductConstituentGridPanel'
    ],

    refs: [
        {
            ref: 'allProductConstituentsGrid',
            selector: 'productconstituentmainpanel grid'
        }
    ],

    onAddProductConstituentsButtonClick: function(button, e, eOpts) {
        var win = Ext.create('cobuy.view.NewProductConstituentWin');

        win.show();
    },

    onEditProductConstituentsButtonClick: function(button, e, eOpts) {
        var grid = this.getAllProductConstituentsGrid(),
        		record = grid.getSelectionModel().getSelection();

        		if(record[0]) {
        			var editWin = Ext.create('cobuy.view.EditProductConstituentWin');
        			var form = editWin.down('form');
        			//var grouptype_id = record[0].get('grouptype_id');


        			Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=ProductConstituents/obtainConstituentsExtraInformation',
        			     params: {
        					//measurement_symbol_id: record[0].get('measurement_symbol_id'),
                            product_id: record[0].get('product_id'),
                             id:record[0].get('id')
        				},
                     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

        					var measurement_symbol = jsonResponse.measurement_symbol;
                            var product = jsonResponse.name;

                            var category = jsonResponse.category;
                                var service = jsonResponse.service;
                                var producttype = jsonResponse.producttype;
                                var mainview = jsonResponse.product.icon;
                                var frontview = jsonResponse.product.product_front_view;
                                var backview = jsonResponse.product.product_back_view;
                                var rightsideview = jsonResponse.product.product_right_side_view;
                                var leftsideview = jsonResponse.product.product_left_side_view;
                                var topview = jsonResponse.product.product_top_view;
                                var bottomview = jsonResponse.product.product_bottom_view;
                                var contentview = jsonResponse.product.product_contents_or_booth_view;
                                var insidefrontview = jsonResponse.product.product_inside_view;
                                var insidedashboardview = jsonResponse.product.product_dashboard_view;
                                var engineview = jsonResponse.product.product_engine_view;
                                var headlineview = jsonResponse.product.headline_image;

                                //get the handle to the image

                            var mainview_image = editWin.down('#mainviewImg');
                            var frontview_image = editWin.down('#frontviewImg');
                            var backview_image = editWin.down('#backviewImg');
                            var rightsideview_image = editWin.down('#rightsideviewImg');
                            var leftsideview_image = editWin.down('#leftsideviewImg');
                            var topview_image = editWin.down('#topviewImg');
                            var bottomview_image = editWin.down('#bottomviewImg');
                            var contentview_image = editWin.down('#contentviewImg');
                            var insideview_image = editWin.down('#insidefrontviewImg');
                            var insidedashboardview_image = editWin.down('#insidedashboardImg');
                            var engineview_image = editWin.down('#engineviewImg');
                            var headline_image = editWin.down('#headlineImg');

                             //get the image source
                                if(mainview != null){
                                     mainview_image.setSrc('../cobuy_images/icons' + '/' + mainview);
                                }


                            //set the title of the fieldser
                            //component.down('#mainFieldset').setTitle('Some Cool Complete Image');

                                if(frontview != null){
                                    frontview_image.setSrc('../cobuy_images/icons' + '/' + frontview);
                                }

                           // component.down('#frontFieldset').setTitle('Some Cool Complete Front Image');
                                if(backview != null){
                                    backview_image.setSrc('../cobuy_images/icons' + '/' + backview);
                                }

                                if(rightsideview != null){
                                     rightsideview_image.setSrc('../cobuy_images/icons' + '/' + rightsideview);
                                }

                                if(leftsideview != null){
                                    leftsideview_image.setSrc('../cobuy_images/icons' + '/' + leftsideview);

                                }

                                if(topview!= null){
                                     topview_image.setSrc('../cobuy_images/icons' + '/' + topview);
                                }

                                if(bottomview != null){
                                    bottomview_image.setSrc('../cobuy_images/icons' + '/' + bottomview);
                                }

                                if(contentview != null){
                                     contentview_image.setSrc('../cobuy_images/icons' + '/' + contentview);
                                }

                                if(insidefrontview != null){
                                    insideview_image.setSrc('../cobuy_images/icons' + '/' + insidefrontview);
                                }

                                if(insidedashboardview != null){
                                    insidedashboardview_image.setSrc('../cobuy_images/icons' + '/' + insidedashboardview);
                                }

                                if(engineview != null){
                                    engineview_image.setSrc('../cobuy_images/icons' + '/' + engineview);
                                }

                                if(headlineview != null){
                                     headline_image.setSrc('../cobuy_images/posters' + '/' + headlineview);
                                }

        					}

        					var values = {
        						product: product,
        						measurement_symbol: measurement_symbol

        					};


        					form.loadRecord(record[0]);

        					form.getForm().setValues(values);


        				}




        			});


        			editWin.show();
        		} else {
        				Ext.Msg.alert('Error!', 'Please Select a Product Constituent to edit');
        		}
    },

    onDeleteProductConstituentButtonClick: function(button, e, eOpts) {
        var grid = this.getAllProductConstituentsGrid();
        		var record= grid.getSelectionModel().getSelection();

        if(record[0]){


        	Ext.Msg.show({
                         title:'Delete?',
                         msg: 'Are you sure you want to delete this Product Constituents?',
                         buttons: Ext.Msg.YESNO,
                         icon: Ext.Msg.QUESTION,
                         fn: function (buttonId){
                            if (buttonId == 'yes'){
                                Ext.Ajax.request({
                                    url: '/cobuy/index.php?r=ProductConstituents/DeleteThisProductConstituents',
                                    params: {
                                        id: record[0].get('id')

                                    },
                                    success: function(conn, response, options, eOpts) {

                                        var result = Ext.JSON.decode(conn.responseText);

                                        if (result.success) {

                                            Ext.Msg.alert('Success!', result.msg);
                                            grid.getStore().load();

                                        } else {
                                            var error = Ext.JSON.decode(conn.responseText);
                                            Ext.Msg.alert('Error', error.msg);
                                        }
                                    },
                                    failure: function(conn, response, options, eOpts) {

                                        Ext.Msg.alert('Failure', 'Communication Error');
                                    }
                                });
                            }
                         }
                    });

        }else {
        				Ext.Msg.alert('Error', 'Please Select a Product Constituent to delete');
        		}

    },

    onSaveNewProductConstituentButtonClick: function(button, e, eOpts) {
        var win = button.up('window'),
        			formPanel = win.down('form'),
        			store = this.getAllProductConstituentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
        					url: '/cobuy/index.php?r=ProductConstituents/addNewProductConstituent',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							store.load();

        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
    },

    onSaveEdittedProductConstituentButtonClick: function(button, e, eOpts) {
        var win = button.up('window'),
        			formPanel = win.down('form'),
        			store = this.getAllProductConstituentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
        					url: '/cobuy/index.php?r=ProductConstituents/updateProductConstituent',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							store.load();

        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
    },

    onProductConstituentGridpanelItemDblClick: function(dataview, record, item, index, e, eOpts) {
        this.onEditProductConstituentsButtonClick();
    },

    onProductConstituentsPanelRender: function(component, eOpts) {
        component.down('grid').getStore().load();
    },

    onConstituentsNextButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        var form  = win.down('theproductconstituentform');

        var form_layout = form.getLayout();

        var item = form_layout .getNext();

        if(item.getXType() == 'thisproductspecificationform' ){
            //change the button text to payment
          win.down('#saveBtn').setVisible(true);
          Ext.getCmp('next_product_product').setVisible(false);
        }

    },

    onEdittedConstituentNextButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        var form  = win.down('theproductconstituentform');

        var form_layout = form.getLayout();

        var item = form_layout .getNext();

        if(item.getXType() == 'thisproductspecificationform' ){
            //change the button text to payment
          win.down('#saveBtn').setVisible(true);
          Ext.getCmp('next_product_product').setVisible(false);
        }

    },

    onPreviousConstituentsButtonClick: function(button, e, eOpts) {
        //get the active card

        var win = button.up('window');

        var form  = win.down('theproductconstituentform');

        var form_layout = form.getLayout();

        var item = form_layout .getPrev();


        if(item.getXType() == 'productfeaturesform' ){

          win.down('#saveBtn').setVisible(false);
          Ext.getCmp('next_product_product').setVisible(true);

        }
    },

    onEdittedPreviousConstituentsButtonClick: function(button, e, eOpts) {
        //get the active card

        var win = button.up('window');

        var form  = win.down('theproductconstituentform');

        var form_layout = form.getLayout();

        var item = form_layout .getPrev();


        if(item.getXType() == 'productfeaturesform' ){

          win.down('#saveBtn').setVisible(false);
          Ext.getCmp('next_product_product').setVisible(true);

        }
    },

    init: function(application) {
        this.control({
            "productconstituentmainpanel button#addBtn": {
                click: this.onAddProductConstituentsButtonClick
            },
            "productconstituentmainpanel button#editBtn": {
                click: this.onEditProductConstituentsButtonClick
            },
            "productconstituentmainpanel button#deleteBtn": {
                click: this.onDeleteProductConstituentButtonClick
            },
            "newproductconstituentwin button#saveBtn": {
                click: this.onSaveNewProductConstituentButtonClick
            },
            "editproductconstituentwin button#saveBtn": {
                click: this.onSaveEdittedProductConstituentButtonClick
            },
            "productconstituentmainpanel grid": {
                itemdblclick: this.onProductConstituentGridpanelItemDblClick
            },
            "productconstituentmainpanel": {
                render: this.onProductConstituentsPanelRender
            },
            "newproductconstituentwin button#next_product_product": {
                click: this.onConstituentsNextButtonClick
            },
            "editproductconstituentwin button#next_product_product": {
                click: this.onEdittedConstituentNextButtonClick
            },
            "newproductconstituentwin button#previous_product_product": {
                click: this.onPreviousConstituentsButtonClick
            },
            "editproductconstituentwin button#previous_product_product": {
                click: this.onEdittedPreviousConstituentsButtonClick
            }
        });
    }

});
