/*
 * File: app/controller/CurrencyExchangeController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('cobuy.controller.CurrencyExchangeController', {
    extend: 'Ext.app.Controller',

    models: [
        'CurrencyExchange'
    ],
    stores: [
        'CurrencyExchanges'
    ],
    views: [
        'CurrencyExchangeRateGridpanel',
        'CurrencyExchangeRateMainpanel',
        'AddNewCurrencyExchangeRateWin',
        'ModifyCurrencyExchangeRateWin'
    ],

    refs: [
        {
            ref: 'allCurrencyExchangesGrid',
            selector: 'currencyexchangeratemainpanel grid'
        }
    ],

    onAddCurrencyExchangesButtonClick: function(button, e, eOpts) {
        var grid = this.getAllCurrencyExchangesGrid(),
        		record = grid.getSelectionModel().getSelection();

        		if(record[0]) {
        			var editWin = Ext.create('cobuy.view.AddNewCurrencyExchangeRateWin');
        			var form = editWin.down('form');
        			//var grouptype_id = record[0].get('grouptype_id');

        			Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Currencies/ListAllCurrenciesAndExchanges',
        			     params: {
        					id: record[0].get('id')
        				},
                     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

        					//var grouptype_name = jsonResponse.grouptype[0].name;



        					}

        					var values = {
        						//grouptype_id: grouptype_name,
        						name: record[0].get('name'),
        						description: record[0].get('description'),
        						icon: record[0].get('icon')


        					};


        					form.loadRecord(record[0]);

        					form.getForm().setValues(values);


        				}




        			});


        			editWin.show();
        		} else {
        				Ext.Msg.alert('Error!', 'Please Select a Currency for exchange');
        		}
    },

    onModifyCurrencyExchangeButtonClick: function(button, e, eOpts) {
        var grid = this.getAllCurrencyExchangesGrid(),
        		record = grid.getSelectionModel().getSelection();

        		if(record[0]) {
        			var editWin = Ext.create('cobuy.view.ModifyCurrencyExchangeRateWin');
        			var form = editWin.down('form');
        			//var grouptype_id = record[0].get('grouptype_id');

        			Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Currencies/ListCurrencyExchangeDetails',
        			     params: {
        					id: record[0].get('id')
        				},
                     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

        					//var grouptype_name = jsonResponse.grouptype[0].name;



        					}

        					var values = {
        						//grouptype_id: grouptype_name,
        						name: record[0].get('name'),
        						description: record[0].get('description'),
        						icon: record[0].get('icon')


        					};


        					form.loadRecord(record[0]);

        					form.getForm().setValues(values);


        				}




        			});


        			editWin.show();
        		} else {
        				Ext.Msg.alert('Error!', 'Please Select a Currency Exchange to edit');
        		}
    },

    onSaveNewCurrencyExchangeButtonClick: function(button, e, eOpts) {
        var win = button.up('window'),
        			formPanel = win.down('form'),
        			store = this.getAllCurrencyExchangesGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
        					url: '/cobuy/index.php?r=Currencies/addNewCurrencyPairExchange(',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							store.load();

        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
    },

    onSaveModifiedCurrencyExchangeButtonClick: function(button, e, eOpts) {
        var win = button.up('window'),
        			formPanel = win.down('form'),
        			store = this.getAllCurrencyExchangesGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
        					url: '/cobuy/index.php?r=Currencies/updateCurrencyPairExchange',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							store.load();

        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
    },

    onCurrencyExchangeGridpanelItemDblClick: function(dataview, record, item, index, e, eOpts) {
        this.onModifyCurrencyExchangeButtonClick();
    },

    onCurrencyExchangePanelRender: function(component, eOpts) {
        component.down('grid').getStore().load();
    },

    init: function(application) {
        this.control({
            "currencyexchangeratemainpanel button#addBtn": {
                click: this.onAddCurrencyExchangesButtonClick
            },
            "currencyexchangeratemainpanel button#editBtn": {
                click: this.onModifyCurrencyExchangeButtonClick
            },
            "addnewcurrencyexchangeratewin button#addBtn": {
                click: this.onSaveNewCurrencyExchangeButtonClick
            },
            "modifycurrencyexchangeratewin button#modifyBtn": {
                click: this.onSaveModifiedCurrencyExchangeButtonClick
            },
            "currencyexchangeratemainpanel grid": {
                itemdblclick: this.onCurrencyExchangeGridpanelItemDblClick
            },
            "currencyexchangeratemainpanel ": {
                render: this.onCurrencyExchangePanelRender
            }
        });
    }

});
