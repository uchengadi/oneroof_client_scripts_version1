/*
 * File: app/controller/RoleController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('cobuy.controller.RoleController', {
    extend: 'Ext.app.Controller',

    models: [
        'Role'
    ],
    stores: [
        'AuthRoles'
    ],
    views: [
        'RolesMain',
        'NewRoleWin',
        'EditRoleWin',
        'RoleAssignmentWin'
    ],

    refs: [
        {
            ref: 'allRolesGrid',
            selector: 'rolesmain grid'
        }
    ],

    onCreateRolesButtonClick: function(button, e, eOpts) {
        var win = Ext.create('cobuy.view.NewRoleWin');

        win.show();
    },

    onEditRoleButtonClick: function(button, e, eOpts) {
        //onEditRoleButtonClick ==== rolesmain button#editBtn

        var grid = this.getAllRolesGrid(),
        		record = grid.getSelectionModel().getSelection();

        		if(record[0]) {
        			var editWin = Ext.create('cobuy.view.EditRoleWin');
        			editWin.down('form').loadRecord(record[0]);
        			editWin.show();
        		} else {
        				Ext.Msg.alert('Error!', 'Please Select a Role to edit');

                }
    },

    onAssignRolesButtonClick: function(button, e, eOpts) {

        var grid = this.getAllRolesGrid();
        		var record = grid.getSelectionModel().getSelection();


        		if(record[0]){
        			var win = Ext.create('cobuy.view.RoleAssignmentWin');
        			var form = win.down('form');
        			var role_container =form.down('#roleCheckbox');
        			var task_container =form.down('#taskCheckbox');
        			var operation_container =form.down('#operationCheckbox');
        			//var user_name = record[0].get('firstname')+ ' ' + record[0].get('middlename') + ' ' + record[0].get('lastname');
        			var role_name = record[0].get('name');



        			Ext.Ajax.request({
                      url: '/cobuy/index.php?r=Authitem/Listallrolesanditschildren',
        				params: {
        					role_name: record[0].get('name')
        					//role_type: record[0].get('type')
        				},
                     //success or failure

        			success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);


        				//checkboxgroup for operations
        					var checkboxGroup_operation = {
                                 xtype: 'checkboxgroup',
                                 columns: 1,
                                  vertical: true,
                                  width: 500,
                                 //fieldLabel: 'Authorisation',
                                 //name: 'recipients',
                                 style: {
                                       padding: '5px 10px 5px 10px'
                                 },
                           items: []

                      };

        			  //checkboxgroup for task
        			  var checkboxGroup_task = {
                                 xtype: 'checkboxgroup',
                                 columns: 1,
                                  vertical: true,
                                  width: 500,
                                 //fieldLabel: 'Authorisation',
                                 //name: 'recipients',
                                 style: {
                                       padding: '5px 10px 5px 10px'
                                 },
                           items: []

                      };

        			  //checkboxgroup for operations
        			  var checkboxGroup_role = {
                                 xtype: 'checkboxgroup',
                                 columns: 1,
                                  vertical: true,
                                  width: 500,
                                 //fieldLabel: 'Authorisation',
                                 //name: 'recipients',
                                 style: {
                                       padding: '5px 10px 5px 10px'
                                 },
                           items: []

                      };

                       var i, j, k,  len = jsonResponse.authitems.length, item, children, length = jsonResponse.children.length, name, select_value, operations,
        			   roles, tasks;

        			  for (i=0; i < len; i++) {
        					item = jsonResponse.authitems[i];
        					if(item.type == 0) {
        						for( j = 0; j < length; j++){
        							children = jsonResponse.children[j];
        							if(children.child === item.name){
        								item.select_value = children.child;
        								name = role_name;

        							}


        						}//end of the j for loop statement
        						checkboxGroup_operation.items.push({
        							xtype: 'checkbox',
        							boxLabel: item.name,
        							name: 'child[]',
        							inputValue: item.name,
        							checked: item.select_value

        						});




        					}//end of the item.type if statement



        			   } //end of the i for loop
        			   operation_container.add(checkboxGroup_operation);

        			  for (i=0; i < len; i++) {
        					item = jsonResponse.authitems[i];
        					if(item.type == 1) {
        						for( j = 0; j < length; j++){
        							children = jsonResponse.children[j];
        							if(children.child === item.name){
        								item.select_value = children.child;
        								name = role_name;

        							}


        						}//end of the j for loop statement
        						checkboxGroup_task.items.push({
        							xtype: 'checkbox',
        							boxLabel: item.name,
        							name: 'child[]',
        							inputValue: item.name,
        							checked: item.select_value

        						});




        					}//end of the item.type if statement



        			   } //end of the i for loop
        			   task_container.add(checkboxGroup_task);


        			   for (i=0; i < len; i++) {
        					item = jsonResponse.authitems[i];
        					if(item.type == 2) {
        						if(item.name === role_name){
        									continue;
        						}
        						for( j = 0; j < length; j++){
        							children = jsonResponse.children[j];
        							if(children.child === item.name){
        								item.select_value = children.child;
        								name = role_name;

        							}


        						}//end of the j for loop statement
        						checkboxGroup_role.items.push({
        							xtype: 'checkbox',
        							boxLabel: item.name,
        							name: 'child[]',
        							inputValue: item.name,
        							checked: item.select_value

        						});




        					}//end of the item.type if statement



        			   } //end of the i for loop
        			   role_container.add(checkboxGroup_role);



        			   var values = {
        				name: role_name

        				};


        		   //form.loadRecord(record[0]);

        		   form.getForm().setValues(values);

        			}



        			});

        			win.show();


        		} else {
        				Ext.Msg.alert('Error', 'Please Select a Role ');

        		}
    },

    onDeleteRoleButtonClick: function(button, e, eOpts) {
        var grid = this.getAllRolesGrid();
        		var record= grid.getSelectionModel().getSelection();

        if(record[0]){


        	Ext.Msg.show({
                         title:'Delete?',
                         msg: 'Are you sure you want to delete this Role?',
                         buttons: Ext.Msg.YESNO,
                         icon: Ext.Msg.QUESTION,
                         fn: function (buttonId){
                            if (buttonId == 'yes'){
                                Ext.Ajax.request({
                                    url: '/cobuy/index.php?r=Authitem/deleteoneauthitem',
                                    params: {
                                        id: record[0].get('id')

                                    },
                                    success: function(conn, response, options, eOpts) {

                                        var result = Ext.JSON.decode(conn.responseText);

                                        if (result.success) {

                                            Ext.Msg.alert('Success!', result.msg);
                                            grid.getStore().load();

                                        } else {
                                            var error = Ext.JSON.decode(conn.responseText);
                                            Ext.Msg.alert('Error', error.msg);
                                        }
                                    },
                                    failure: function(conn, response, options, eOpts) {

                                        Ext.Msg.alert('Failure', 'Communication Error');
                                    }
                                });
                            }
                         }
                    });

        }else {
        				Ext.Msg.alert('Error', 'Please Select a Role to delete');
        		}

    },

    onSaveCreatedNewRoleButtonClick: function(button, e, eOpts) {
        var win = button.up('window'),
        			formPanel = win.down('form'),
        			store = this.getallRolesGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
        					url: '/cobuy/index.php?r=Authitem/createnewrole',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							store.load();

        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
    },

    onSaveEdittedRoleButtonClick: function(button, e, eOpts) {
        var win = button.up('window'),
        			formPanel = win.down('form'),
        			store = this.getallRolesGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
        					url: '/cobuy/index.php?r=Authitem/updaterole',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							store.load();

        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
    },

    onSaveAssignedRoleButtonClick: function(button, e, eOpts) {
        var win = button.up('window'),
        			formPanel = win.down('form'),
        			store = this.getallRolesGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
        					url: '/cobuy/index.php?r=Authitem/assignauthitemstoroles',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							store.load();

        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
    },

    onRolesGridpanelItemDblClick: function(dataview, record, item, index, e, eOpts) {
        var grid = this.getAllRolesGrid();
        		var record = grid.getSelectionModel().getSelection();


        		if(record[0]){
        			var win = Ext.create('cobuy.view.RoleAssignmentWin');
        			var form = win.down('form');
        			var role_container =form.down('#roleCheckbox');
        			var task_container =form.down('#taskCheckbox');
        			var operation_container =form.down('#operationCheckbox');
        			//var user_name = record[0].get('firstname')+ ' ' + record[0].get('middlename') + ' ' + record[0].get('lastname');
        			var role_name = record[0].get('name');



        			Ext.Ajax.request({
                      url: '/cobuy/index.php?r=Authitem/Listallrolesanditschildren',
        				params: {
        					role_name: record[0].get('name')
        					//role_type: record[0].get('type')
        				},
                     //success or failure

        			success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);


        				//checkboxgroup for operations
        					var checkboxGroup_operation = {
                                 xtype: 'checkboxgroup',
                                 columns: 1,
                                  vertical: true,
                                  width: 500,
                                 //fieldLabel: 'Authorisation',
                                 //name: 'recipients',
                                 style: {
                                       padding: '5px 10px 5px 10px'
                                 },
                           items: []

                      };

        			  //checkboxgroup for task
        			  var checkboxGroup_task = {
                                 xtype: 'checkboxgroup',
                                 columns: 1,
                                  vertical: true,
                                  width: 500,
                                 //fieldLabel: 'Authorisation',
                                 //name: 'recipients',
                                 style: {
                                       padding: '5px 10px 5px 10px'
                                 },
                           items: []

                      };

        			  //checkboxgroup for operations
        			  var checkboxGroup_role = {
                                 xtype: 'checkboxgroup',
                                 columns: 1,
                                  vertical: true,
                                  width: 500,
                                 //fieldLabel: 'Authorisation',
                                 //name: 'recipients',
                                 style: {
                                       padding: '5px 10px 5px 10px'
                                 },
                           items: []

                      };

                       var i, j, k,  len = jsonResponse.authitems.length, item, children, length = jsonResponse.children.length, name, select_value, operations,
        			   roles, tasks;

        			  for (i=0; i < len; i++) {
        					item = jsonResponse.authitems[i];
        					if(item.type == 0) {
        						for( j = 0; j < length; j++){
        							children = jsonResponse.children[j];
        							if(children.child === item.name){
        								item.select_value = children.child;
        								name = role_name;

        							}


        						}//end of the j for loop statement
        						checkboxGroup_operation.items.push({
        							xtype: 'checkbox',
        							boxLabel: item.name,
        							name: 'child[]',
        							inputValue: item.name,
        							checked: item.select_value

        						});




        					}//end of the item.type if statement



        			   } //end of the i for loop
        			   operation_container.add(checkboxGroup_operation);

        			  for (i=0; i < len; i++) {
        					item = jsonResponse.authitems[i];
        					if(item.type == 1) {
        						for( j = 0; j < length; j++){
        							children = jsonResponse.children[j];
        							if(children.child === item.name){
        								item.select_value = children.child;
        								name = role_name;

        							}


        						}//end of the j for loop statement
        						checkboxGroup_task.items.push({
        							xtype: 'checkbox',
        							boxLabel: item.name,
        							name: 'child[]',
        							inputValue: item.name,
        							checked: item.select_value

        						});




        					}//end of the item.type if statement



        			   } //end of the i for loop
        			   task_container.add(checkboxGroup_task);


        			   for (i=0; i < len; i++) {
        					item = jsonResponse.authitems[i];
        					if(item.type == 2) {
        						if(item.name === role_name){
        									continue;
        						}
        						for( j = 0; j < length; j++){
        							children = jsonResponse.children[j];
        							if(children.child === item.name){
        								item.select_value = children.child;
        								name = role_name;

        							}


        						}//end of the j for loop statement
        						checkboxGroup_role.items.push({
        							xtype: 'checkbox',
        							boxLabel: item.name,
        							name: 'child[]',
        							inputValue: item.name,
        							checked: item.select_value

        						});




        					}//end of the item.type if statement



        			   } //end of the i for loop
        			   role_container.add(checkboxGroup_role);



        			   var values = {
        				name: role_name

        				};


        		   //form.loadRecord(record[0]);

        		   form.getForm().setValues(values);

        			}



        			});

        			win.show();


        		} else {
        				Ext.Msg.alert('Error', 'Please Select a Role ');

        		}
    },

    onRolesPanelRender: function(component, eOpts) {
        component.down('grid').getStore().load();
    },

    init: function(application) {
        this.control({
            "rolesmain button#createBtn": {
                click: this.onCreateRolesButtonClick
            },
            "rolesmain button#editBtn": {
                click: this.onEditRoleButtonClick
            },
            "rolesmain button#assignBtn": {
                click: this.onAssignRolesButtonClick
            },
            "rolesmain button#deleteBtn": {
                click: this.onDeleteRoleButtonClick
            },
            "newrolewin button#createBtn": {
                click: this.onSaveCreatedNewRoleButtonClick
            },
            "editrolewin button#editBtn": {
                click: this.onSaveEdittedRoleButtonClick
            },
            "roleassignmentwin button#assignBtn": {
                click: this.onSaveAssignedRoleButtonClick
            },
            "rolesmain grid": {
                itemdblclick: this.onRolesGridpanelItemDblClick
            },
            "rolesmain": {
                render: this.onRolesPanelRender
            }
        });
    }

});
