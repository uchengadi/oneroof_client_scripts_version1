/*
 * File: app/controller/PlatformSettingsController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('cobuy.controller.PlatformSettingsController', {
    extend: 'Ext.app.Controller',

    models: [
        'PlatformSetting'
    ],
    stores: [
        'PlatformSettings'
    ],
    views: [
        'PlatformSettingGridpanel',
        'PlatformSettingsMainpanel',
        'NewPlatformSetiingsWin',
        'EditPlatformSettingsWin'
    ],

    refs: [
        {
            ref: 'allPlatformSettingsGrid',
            selector: 'platformsettingsmainpanel grid'
        }
    ],

    onAddPlatformSettingsButtonClick: function(button, e, eOpts) {
        var win = Ext.create('cobuy.view.NewPlatformSetiingsWin');

        win.show();
    },

    onEditPlatformSettingsButtonClick: function(button, e, eOpts) {
        var grid = this.getAllPlatformSettingsGrid(),
        		record = grid.getSelectionModel().getSelection();
        //var win = button.up('window');
        		if(record[0]) {
        			var editWin = Ext.create('cobuy.view.EditPlatformSettingsWin');
        			var form = editWin.down('form');
                    Ext.Ajax.request({
                        url: '/cobuy/index.php?r=PlatformSettings/retrieveSettingsInfo',
        				 params: {
                            id: record[0].get('id'),
                             platform_default_currency_id: record[0].get('platform_default_currency_id'),
                             platform_default_time_zone_id: record[0].get('platform_default_time_zone_id')

        				 },

                        success: function(response){

                        var jsonResponse = Ext.decode(response.responseText);
                            if (jsonResponse.success) {

                                    var icontypes = jsonResponse.icon;
                                    var postertypes = jsonResponse.poster;
                                   // var documenttypes = jsonResponse.document;
                                    //var ziptypes = jsonResponse.zip;
                                    var currency_name = jsonResponse.currency;
                                    var timezone = jsonResponse.timezone;
                                    var id = record[0].get('id');
                                    var type = "platform";


                                if(Ext.each(icontypes, function(item){
                                   if(item === 'image/png'){
                                     Ext.getCmp('iconpng').setValue(true);

                                   }
                                    if(item === 'image/jpg'){
                                        Ext.getCmp('iconjpg').setValue(true);


                                    }
                                    if(item === 'image/jpeg'){
                                       Ext.getCmp('iconjpeg').setValue(true);


                                       }
                                    if(item === 'image/gif'){
                                        Ext.getCmp('icongif').setValue(true);


                                    }
                                    if(item === 'application/x-shockwave-flash'){
                                        Ext.getCmp('iconflash').setValue(true);


                                    }
                                    if(item === 'image/psd'){
                                        Ext.getCmp('iconpsd').setValue(true);


                                    }
                                    if(item === 'image/bmp'){
                                       Ext.getCmp('iconbmp').setValue(true);


                                    }
                                    if(item === 'image/tiff'){
                                      Ext.getCmp('icontiff').setValue(true);

                                    }
                                    if(item === 'application/octet-stream'){
                                       Ext.getCmp('iconoctet').setValue(true);


                                    }
                                    if(item === 'image/jp2'){
                                       Ext.getCmp('iconjp2').setValue(true);


                                    }
                                    if(item === 'image/vnd.wap.wbmp'){
                                        Ext.getCmp('iconwap').setValue(true);


                                    }
                                    if(item === 'image/xbm'){
                                       Ext.getCmp('iconxbm').setValue(true);


                                    }
                                    if(item === 'image/vnd.microsoft.icon'){
                                       Ext.getCmp('iconmicrosoft').setValue(true);


                                    }

                                }));

                                //work on the poster mime types
                                if(Ext.each(postertypes, function(item){
                                   if(item === 'image/png'){
                                    Ext.getCmp('posterpng').setValue(true);
                                   }
                                    if(item === 'image/jpg'){
                                        Ext.getCmp('posterjpg').setValue(true);
                                    }
                                    if(item === 'image/jpeg'){
                                       Ext.getCmp('posterjpeg').setValue(true);
                                       }
                                    if(item === 'image/gif'){
                                        Ext.getCmp('postergif').setValue(true);
                                    }
                                    if(item === 'application/x-shockwave-flash'){
                                        Ext.getCmp('posterflash').setValue(true);
                                    }
                                    if(item === 'image/psd'){
                                        Ext.getCmp('posterpsd').setValue(true);
                                    }
                                    if(item === 'image/bmp'){
                                        Ext.getCmp('posterbmp').setValue(true);
                                    }
                                    if(item === 'image/tiff'){
                                        Ext.getCmp('postertiff').setValue(true);
                                    }
                                    if(item === 'application/octet-stream'){
                                        Ext.getCmp('posteroctet').setValue(true);
                                    }
                                    if(item === 'image/jp2'){
                                        Ext.getCmp('posterjp2').setValue(true);
                                    }
                                    if(item === 'image/vnd.wap.wbmp'){
                                        Ext.getCmp('posterwap').setValue(true);
                                    }
                                    if(item === 'image/xbm'){
                                        Ext.getCmp('posterxbm').setValue(true);
                                    }
                                    if(item === 'image/vnd.microsoft.icon'){
                                        Ext.getCmp('postermicrosoft').setValue(true);
                                    }

                                }));



                                                   }
                            var values = {
                                platform_default_currency:currency_name,
                                platform_default_time_zone: timezone,
                                id:id

                            };


                           form.loadRecord(record[0]);

                           form.getForm().setValues(values);

                        }


                    });


        			editWin.show();
        		} else {
        				Ext.Msg.alert('Error', 'Please Select a Platform Settings to edit');
        		}
    },

    onDeletePlatformSettingsButtonClick: function(button, e, eOpts) {
        var grid = this.getAllPlatformSettingsGrid();
        		var record= grid.getSelectionModel().getSelection();

        if(record[0]){


        	Ext.Msg.show({
                         title:'Delete?',
                         msg: 'Are you sure you want to delete this Platform Settings?',
                         buttons: Ext.Msg.YESNO,
                         icon: Ext.Msg.QUESTION,
                         fn: function (buttonId){
                            if (buttonId == 'yes'){
                                Ext.Ajax.request({
                                    url: '/cobuy/index.php?r=PlatformSettings/DeleteThisPlatformsetting',
                                    params: {
                                        id: record[0].get('id')

                                    },
                                    success: function(conn, response, options, eOpts) {

                                        var result = Ext.JSON.decode(conn.responseText);

                                        if (result.success) {

                                            Ext.Msg.alert('Success!', result.msg);
                                            grid.getStore().load();

                                        } else {
                                            var error = Ext.JSON.decode(conn.responseText);
                                            Ext.Msg.alert('Error', error.msg);
                                        }
                                    },
                                    failure: function(conn, response, options, eOpts) {

                                        Ext.Msg.alert('Failure', 'Communication Error');
                                    }
                                });
                            }
                         }
                    });

        }else {
        				Ext.Msg.alert('Error!', 'Please Select a Platform Settings to delete');
        		}

    },

    onSaveNewPlatformSettingsButtonClick: function(button, e, eOpts) {
        var win = button.up('window'),
        			formPanel = win.down('form'),
        			store = this.getAllPlatformSettingsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
        					url: '/cobuy/index.php?r=PlatformSettings/addnewplatformsettings',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							store.load();

        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
    },

    onSaveEdittedPlatformSettingsButtonClick: function(button, e, eOpts) {
        var win = button.up('window'),
        			formPanel = win.down('form'),
        			store = this.getAllPlatformSettingsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
        					url: '/cobuy/index.php?r=PlatformSettings/updateplatformsettings',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							store.load();

        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
    },

    onPlatformSettingsGridpanelItemDblClick: function(dataview, record, item, index, e, eOpts) {
        this.onEditPlatformSettingsButtonClick();
    },

    onPlatformSettingsPanelRender: function(component, eOpts) {
        component.down('grid').getStore().load();
    },

    init: function(application) {
        this.control({
            "platformsettingsmainpanel button#addBtn": {
                click: this.onAddPlatformSettingsButtonClick
            },
            "platformsettingsmainpanel button#editBtn": {
                click: this.onEditPlatformSettingsButtonClick
            },
            "platformsettingsmainpanel button#deleteBtn": {
                click: this.onDeletePlatformSettingsButtonClick
            },
            "newplatformsetiingswin button#addBtn": {
                click: this.onSaveNewPlatformSettingsButtonClick
            },
            "editplatformsettingswin button#addBtn": {
                click: this.onSaveEdittedPlatformSettingsButtonClick
            },
            "platformsettingsmainpanel grid": {
                itemdblclick: this.onPlatformSettingsGridpanelItemDblClick
            },
            "platformsettingsmainpanel": {
                render: this.onPlatformSettingsPanelRender
            }
        });
    }

});
