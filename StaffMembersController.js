/*
 * File: app/controller/StaffMembersController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('cobuy.controller.StaffMembersController', {
    extend: 'Ext.app.Controller',

    models: [
        'Member'
    ],
    stores: [
        'Members'
    ],
    views: [
        'StaffMemberGridpanel',
        'StaffMemberMainpanel',
        'EditStaffMemberWin',
        'NewStaffMemberWin',
        'ChangeMemberPasswordForm',
        'ChangeMemberPasswordWin'
    ],

    refs: [
        {
            ref: 'allStaffMembersGrid',
            selector: 'staffmembermainpanel grid'
        }
    ],

    onAddStaffMemberButtonClick: function(button, e, eOpts) {
        var win = Ext.create('cobuy.view.NewStaffMemberWin');

        win.show();
    },

    onEditStaffMemberButtonClick: function(button, e, eOpts) {
        var grid = this.getAllStaffMembersGrid(),
        		record = grid.getSelectionModel().getSelection();

        		if(record[0]) {
        			var editWin = Ext.create('cobuy.view.EditStaffMemberWin');
        			var form = editWin.down('form');
        			//var grouptype_id = record[0].get('grouptype_id');

        			Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Members/ObtainMemberExtraInformation',
                        params:{
                            member_id:record[0].get('id')
                        },

        			     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var username = jsonResponse.member.username;
                                var email = jsonResponse.member.email;
                                var membership_number = jsonResponse.member.membership_number;
                                var firstname = jsonResponse.member.firstname;
                                var middlename = jsonResponse.member.middlename;
                                var lastname = jsonResponse.member.lastname;
                                var gender = jsonResponse.member.gender;
                                var address1 = jsonResponse.member.address1;
                                var address2 = jsonResponse.member.address2;
                                var dateofbirth = jsonResponse.member.dateofbirth;
                                var religion = jsonResponse.member.religion;
                                var maritalstatus = jsonResponse.member.maritalstatus;
                                var category = jsonResponse.member.category;
                                var landline = jsonResponse.member.landline;
                                var mobile_line = jsonResponse.member.mobile_line;
                                var delivery_address1 = jsonResponse.member.delivery_address1;
                                var delivery_address2 = jsonResponse.member.delivery_address2;
                                var corporate_address1 = jsonResponse.member.corporate_address1;
                                var corporate_address2 = jsonResponse.member.corporate_address2;
                                var name_of_organization = jsonResponse.member.name_of_organization;
                                var unique_registration_number = jsonResponse.member.unique_registration_number;
                                var business_category = jsonResponse.member.business_category;
                                var membershiptype = jsonResponse.membershiptype;
                                var renewal_date = jsonResponse.date_of_renewal;
                                var member_city = jsonResponse.member_city;
                                var member_state = jsonResponse.member_state;
                                var member_country = jsonResponse.member_country;
                                var member_delivery_city = jsonResponse.member_delivery_city;
                                var member_delivery_state = jsonResponse.member_delivery_state;
                                var member_delivery_country = jsonResponse.member_delivery_country;
                                var member_corporate_city = jsonResponse.member_corporate_city;
                                var member_corporate_state = jsonResponse.member_corporate_state;
                                var member_corporate_country = jsonResponse.member_corporate_country;
                                var id = jsonResponse.member.id;
                                var city_id = jsonResponse.member.city_id;
                                var state_id=jsonResponse.member.state_id;
                                var country_id=jsonResponse.member.country_id;
                                var delivery_city_id = jsonResponse.member.delivery_city_id;
                                var delivery_state_id=jsonResponse.member.delivery_state_id;
                                var delivery_country_id = jsonResponse.member.delivery_country_id;
                                var corporate_city_id = jsonResponse.member.corporate_city_id;
                                var corporate_state_id = jsonResponse.member.corporate_state_id;
                                var corporate_country_id = jsonResponse.member.corporate_country_id;
                                var membership_status = jsonResponse.membership_status;
                                var member_picture = jsonResponse.member.picture;
                                var role = jsonResponse.member.role;
                                var status = jsonResponse.member.status;
                                var usertype =  jsonResponse.member.usertype;
                                var membership_type_id = jsonResponse.membership_type_id;






        					}

                            console.log('the picture of this member is:',member_picture);

                            //get the handle to the image

                            var image = editWin.down('#memberPicture');

                            //get the image source

                            image.setSrc('../cobuy_images/icons' + '/' + member_picture);



        					var values = {

                                username:username,
                                email:email,
                                membership_number:membership_number,
                                firstname:firstname,
                                middlename:middlename,
                                lastname:lastname,
                                gender:gender,
                                address1:address1,
                                address2:address2,
                               // dateofbirth:dateofbirth,
                                religion:religion,
                                maritalstatus:maritalstatus,
                                category:category,
                                landline:landline,
                                mobile_line:mobile_line,
                                delivery_address1:delivery_address1,
                                delivery_address2:delivery_address2,
                                corporate_address1:corporate_address1,
                                corporate_address2:corporate_address2,
                                name_of_organization:name_of_organization,
                                unique_registration_number:unique_registration_number,
                                business_category:business_category,
                                membership_type:membershiptype,
                                renewal_due_date:renewal_date,
                                city:member_city,
                                state:member_state,
                                country:member_country,
                                delivery_city:member_delivery_city,
                                delivery_state:member_delivery_state,
                                delivery_country:member_delivery_country,
                                corporate_city:member_corporate_city,
                                corporate_state:member_corporate_state,
                                corporate_country:member_corporate_country,
                                id:id,
                                city_id:city_id,
                                state_id:state_id,
                                country_id:country_id,
                                delivery_city_id:delivery_city_id,
                                delivery_state_id:delivery_state_id,
                                delivery_country_id:delivery_country_id,
                                corporate_city_id:corporate_city_id,
                                corporate_state_id:corporate_state_id,
                                corporate_country_id:corporate_country_id,
                                membership_status:membership_status,
                                role:role,
                                status:status,
                                usertype:usertype,
                                membership_type_id:membership_type_id

        					};

                            form.loadRecord(record[0]);
        					form.getForm().setValues(values);


        				}




        			});


        			editWin.show();
        		} else {
        				Ext.Msg.alert('Error!', 'Please Select a Staff Member to edit');
        		}
    },

    onDeleteStaffMemberButtonClick: function(button, e, eOpts) {
        var grid = this.getAllStaffMembersGrid();
        		var record= grid.getSelectionModel().getSelection();

        if(record[0]){


        	Ext.Msg.show({
                         title:'Delete?',
                         msg: 'Are you sure you want to delete this Staff Member?',
                         buttons: Ext.Msg.YESNO,
                         icon: Ext.Msg.QUESTION,
                         fn: function (buttonId){
                            if (buttonId == 'yes'){
                                Ext.Ajax.request({
                                    url: '/cobuy/index.php?r=Members/DeleteThisMember',
                                    params: {
                                        id: record[0].get('id')

                                    },
                                    success: function(conn, response, options, eOpts) {

                                        var result = Ext.JSON.decode(conn.responseText);

                                        if (result.success) {

                                            Ext.Msg.alert('Success!', result.msg);
                                            grid.getStore().load();

                                        } else {
                                            var error = Ext.JSON.decode(conn.responseText);
                                            Ext.Msg.alert('Error', error.msg);
                                        }
                                    },
                                    failure: function(conn, response, options, eOpts) {

                                        Ext.Msg.alert('Failure', 'Communication Error');
                                    }
                                });
                            }
                         }
                    });

        }else {
        				Ext.Msg.alert('Error', 'Please Select a Staff Member to delete');
        		}

    },

    onSaveNewStaffMemberButtonClick: function(button, e, eOpts) {
        var win = button.up('window'),
        			formPanel = win.down('form'),
        			store = this.getAllStaffMembersGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
        					url: '/cobuy/index.php?r=Members/AddNewStaffMember',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							store.load();

        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
    },

    onSaveEdittedStaffMemberButtonClick: function(button, e, eOpts) {
        var win = button.up('window'),
        			formPanel = win.down('form'),
        			store = this.getAllStaffMembersGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
        					url: '/cobuy/index.php?r=Members/UpdateStaffMember',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							store.load();

        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
    },

    onStaffMembersMainpanelGridpanelItemDblClick: function(dataview, record, item, index, e, eOpts) {
        this.onEditStaffMemberButtonClick();
    },

    onStaffMemberPanelRender: function(component, eOpts) {
        component.down('grid').getStore().load();
    },

    onChangePasswordButtonClick: function(button, e, eOpts) {
        var id = button.up('window').down('form').down('hiddenfield[name=id]').getValue();

        var win = Ext.create('cobuy.view.ChangeMemberPasswordWin');

        var values = {
            id:id
        };

        win.down('form').getForm().setValues(values);

        win.show();
    },

    onEffectingThisMemberPasswordChangeButtonClick: function(button, e, eOpts) {
        var win = button.up('window'),
        			formPanel = win.down('form');

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Members/ChangePasswordForOtherUsers',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    win.close();

        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
    },

    onCountryComboboxSelect: function(combo, records, eOpts) {
        var win = combo.up('window');

        //clear both the state and the city combo

        win.down('#stateCombo').clearValue();

        win.down('#cityCombo').clearValue();

        //get the value of the selected country

        var country_id = combo.getValue();

        //load the product category store for this service

        win.down('#stateCombo').getStore().load({

            params:{
                country_id:country_id
            }
        });
    },

    onStateComboboxSelect: function(combo, records, eOpts) {
        var win = combo.up('window');

        //clear both the city combo

        win.down('#cityCombo').clearValue();

        //get the value of the selected state

        var state_id = combo.getValue();

        //load the city for this state

        win.down('#cityCombo').getStore().load({

            params:{
                state_id:state_id
            }
        });
    },

    onDeliveryCountryComboboxSelect: function(combo, records, eOpts) {
        var win = combo.up('window');

        //clear both the state and the city combo

        win.down('#deliveryStateCombo').clearValue();

        win.down('#deliveryCityCombo').clearValue();

        //get the value of the selected country

        var country_id = combo.getValue();

        //load the product category store for this service

        win.down('#deliveryStateCombo').getStore().load({

            params:{
                country_id:country_id
            }
        });
    },

    onDeliveryStateComboboxSelect: function(combo, records, eOpts) {
        var win = combo.up('window');

        //clear both the city combo

        win.down('#deliveryCityCombo').clearValue();

        //get the value of the selected state

        var state_id = combo.getValue();

        //load the city for this state

        win.down('#deliveryCityCombo').getStore().load({

            params:{
                state_id:state_id
            }
        });
    },

    onCorporateCountryComboboxSelect: function(combo, records, eOpts) {
        var win = combo.up('window');

        //clear both the state and the city combo

        win.down('#corporateStateCombo').clearValue();

        win.down('#corporateCityCombo').clearValue();

        //get the value of the selected country

        var country_id = combo.getValue();

        //load the product category store for this service

        win.down('#corporateStateCombo').getStore().load({

            params:{
                country_id:country_id
            }
        });
    },

    onCorporateStateComboboxSelect: function(combo, records, eOpts) {
        var win = combo.up('window');

        //clear both the city combo

        win.down('#corporateCityCombo').clearValue();

        //get the value of the selected state

        var state_id = combo.getValue();

        //load the city for this state

        win.down('#corporateCityCombo').getStore().load({

            params:{
                state_id:state_id
            }
        });
    },

    init: function(application) {
        this.control({
            "staffmembermainpanel button#addBtn": {
                click: this.onAddStaffMemberButtonClick
            },
            "staffmembermainpanel button#editBtn": {
                click: this.onEditStaffMemberButtonClick
            },
            "staffmembermainpanel button#deleteBtn": {
                click: this.onDeleteStaffMemberButtonClick
            },
            "newstaffmemberwin button#addBtn": {
                click: this.onSaveNewStaffMemberButtonClick
            },
            "editstaffmemberwin button#addBtn": {
                click: this.onSaveEdittedStaffMemberButtonClick
            },
            "staffmembermainpanel grid": {
                itemdblclick: this.onStaffMembersMainpanelGridpanelItemDblClick
            },
            "staffmembermainpanel": {
                render: this.onStaffMemberPanelRender
            },
            "button#changepasswordBtn": {
                click: this.onChangePasswordButtonClick
            },
            "changememberpasswordwin button#changeuserpasswordBtn": {
                click: this.onEffectingThisMemberPasswordChangeButtonClick
            },
            "combobox#countryCombo": {
                select: this.onCountryComboboxSelect
            },
            "combobox#stateCombo": {
                select: this.onStateComboboxSelect
            },
            "combobox#deliveryCountryCombo": {
                select: this.onDeliveryCountryComboboxSelect
            },
            "combobox#deliveryStateCombo": {
                select: this.onDeliveryStateComboboxSelect
            },
            "combobox#corporateCountryCombo": {
                select: this.onCorporateCountryComboboxSelect
            },
            "combobox#corporateStateCombo": {
                select: this.onCorporateStateComboboxSelect
            }
        });
    }

});
