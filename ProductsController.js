/*
 * File: app/controller/ProductsController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('cobuy.controller.ProductsController', {
    extend: 'Ext.app.Controller',

    models: [
        'Products'
    ],
    stores: [
        'Products',
        'VideoPurpose',
        'EveryProduct',
        'ProductCategoryForAService',
        'ProductTypesForACategory',
        'ServiceForHamper',
        'ServiceCategoryForHamper',
        'CategoryProductTypesForHamper',
        'FaaSStages',
        'FaasMonths',
        'FaasYears',
        'ProductClassification',
        'BookAndDocumentTypes',
        'BookPrintQuality',
        'BookWritingStyles',
        'BookFormat',
        'BookPrimaryAudience',
        'ImageMeasurementUnits',
        'ImageFormats',
        'ImageResolutionUnits',
        'VideoFormats',
        'VideoQualityTypes',
        'VideoScanType',
        'shoeMeasurementUnit',
        'ShoeIsDesignedFor',
        'ShoeTarget',
        'ShoesForMenType',
        'ShoesForWomenType',
        'FootageProductionType',
        'SoundProductionType',
        'SoundFormat'
    ],
    views: [
        'ProductGridpanel',
        'ProductMainpanel',
        'NewProductWin',
        'EditProductWin',
        'ModifyingProductStockQuantityWin',
        'AddRemoveProductFromMiddlePageAdvertWin',
        'AddRemoveProductFromMiddlePageAdvertForm'
    ],

    refs: [
        {
            ref: 'allProductsGrid',
            selector: 'productmainpanel grid'
        }
    ],

    onAddProductButtonClick: function(button, e, eOpts) {
        var win = Ext.create('cobuy.view.NewProductWin');

        win.show();
    },

    onEditProductButtonClick: function(button, e, eOpts) {
        var grid = this.getAllProductsGrid(),
        		record = grid.getSelectionModel().getSelection();

        		if(record[0]) {
        			var editWin = Ext.create('cobuy.view.EditProductWin');
        			var form = editWin.down('form');

                     editWin.down('#maximumQuantityNumberfield').setReadOnly(true);

        			Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/obtainPrductExtraInformation',
        			     params: {
        					category_id: record[0].get('category_id'),
                            service_id: record[0].get('service_id'),
                            product_type_id: record[0].get('product_type_id'),
                            product_id: record[0].get('id')
        				},
                     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var category = jsonResponse.category;
                                var service = jsonResponse.service;
                                var producttype = jsonResponse.producttype;
                                var mainview = jsonResponse.product.icon;
                                var frontview = jsonResponse.product.product_front_view;
                                var backview = jsonResponse.product.product_back_view;
                                var rightsideview = jsonResponse.product.product_right_side_view;
                                var leftsideview = jsonResponse.product.product_left_side_view;
                                var topview = jsonResponse.product.product_top_view;
                                var bottomview = jsonResponse.product.product_bottom_view;
                                var contentview = jsonResponse.product.product_contents_or_booth_view;
                                var insidefrontview = jsonResponse.product.product_inside_view;
                                var insidedashboardview = jsonResponse.product.product_dashboard_view;
                                var engineview = jsonResponse.product.product_engine_view;
                                var headlineview = jsonResponse.product.headline_image;
                                var keywordSize = jsonResponse.size;
                                if(jsonResponse.product.is_a_variation == 1 || jsonResponse.product.is_a_variation==true){
                                    editWin.down('#natureOfProductCombo').setReadOnly(true);
                                }
                                if(keywordSize == 0){
                                    var keyword1=" ";
                                    var keyword2=" ";
                                    var keyword3=" ";
                                    var keyword4=" ";
                                    var keyword5=" ";
                                }else if(keywordSize == 1){
                                    var keyword1= jsonResponse.keyword[0].keyword;
                                    var keyword2=" ";
                                    var keyword3=" ";
                                    var keyword4=" ";
                                    var keyword5=" ";
                                }else if(keywordSize == 2){
                                    var keyword1= jsonResponse.keyword[0].keyword;
                                    var keyword2= jsonResponse.keyword[1].keyword;
                                    var keyword3=" ";
                                    var keyword4=" ";
                                    var keyword5=" ";
                                }else if(keywordSize == 3){
                                    var keyword1= jsonResponse.keyword[0].keyword;
                                    var keyword2= jsonResponse.keyword[1].keyword;
                                    var keyword3= jsonResponse.keyword[2].keyword;
                                    var keyword4=" ";
                                    var keyword5=" ";
                                }else if(keywordSize == 4){
                                    var keyword1= jsonResponse.keyword[0].keyword;
                                    var keyword2= jsonResponse.keyword[1].keyword;
                                    var keyword3= jsonResponse.keyword[2].keyword;
                                    var keyword4= jsonResponse.keyword[3].keyword;
                                    var keyword5=" ";
                                }else if(keywordSize == 5){
                                    var keyword1= jsonResponse.keyword[0].keyword;
                                    var keyword2= jsonResponse.keyword[1].keyword;
                                    var keyword3= jsonResponse.keyword[2].keyword;
                                    var keyword4= jsonResponse.keyword[3].keyword;
                                    var keyword5= jsonResponse.keyword[4].keyword;
                                }


                              console.log('the first keyword is:',keyword1);

                                console.log('the second keyword is:',keyword2);

                                //get the handle to the image

                            var mainview_image = editWin.down('#mainviewImg');
                            var frontview_image = editWin.down('#frontviewImg');
                            var backview_image = editWin.down('#backviewImg');
                            var rightsideview_image = editWin.down('#rightsideviewImg');
                            var leftsideview_image = editWin.down('#leftsideviewImg');
                            var topview_image = editWin.down('#topviewImg');
                            var bottomview_image = editWin.down('#bottomviewImg');
                            var contentview_image = editWin.down('#contentviewImg');
                            var insideview_image = editWin.down('#insidefrontviewImg');
                            var insidedashboardview_image = editWin.down('#insidedashboardImg');
                            var engineview_image = editWin.down('#engineviewImg');
                            var headline_image = editWin.down('#headlineImg');


                            //get the image source
                                if(mainview != null){
                                     mainview_image.setSrc('../../cobuy_images/icons' + '/' + mainview);
                                }


                            //set the title of the fieldser
                            //component.down('#mainFieldset').setTitle('Some Cool Complete Image');

                                if(frontview != null){
                                    frontview_image.setSrc('../../cobuy_images/icons' + '/' + frontview);
                                }

                           // component.down('#frontFieldset').setTitle('Some Cool Complete Front Image');
                                if(backview != null){
                                    backview_image.setSrc('../../cobuy_images/icons' + '/' + backview);
                                }

                                if(rightsideview != null){
                                     rightsideview_image.setSrc('../../cobuy_images/icons' + '/' + rightsideview);
                                }

                                if(leftsideview != null){
                                    leftsideview_image.setSrc('../../cobuy_images/icons' + '/' + leftsideview);

                                }

                                if(topview!= null){
                                     topview_image.setSrc('../../cobuy_images/icons' + '/' + topview);
                                }

                                if(bottomview != null){
                                    bottomview_image.setSrc('../../cobuy_images/icons' + '/' + bottomview);
                                }

                                if(contentview != null){
                                     contentview_image.setSrc('../../cobuy_images/icons' + '/' + contentview);
                                }

                                if(insidefrontview != null){
                                    insideview_image.setSrc('../../cobuy_images/icons' + '/' + insidefrontview);
                                }

                                if(insidedashboardview != null){
                                    insidedashboardview_image.setSrc('../../cobuy_images/icons' + '/' + insidedashboardview);
                                }

                                if(engineview != null){
                                    engineview_image.setSrc('../../cobuy_images/icons' + '/' + engineview);
                                }

                                if(headlineview != null){
                                     headline_image.setSrc('../../cobuy_images/posters' + '/' + headlineview);
                                }






        					}

        					var values = {
        						category: category,
        						service: service,
        						product_type: producttype,
                                target:0,
                                keyword1:keyword1,
                                keyword2:keyword2,
                                keyword3:keyword3,
                                keyword4:keyword4,
                                keyword5:keyword5

        					};


        					form.loadRecord(record[0]);

        					form.getForm().setValues(values);


        				}




        			});


        			editWin.show();
        		} else {
        				Ext.Msg.alert('Error!', 'Please Select a Product to edit');
        		}
    },

    onDeleteProductButtonClick: function(button, e, eOpts) {
        var grid = this.getAllProductsGrid();
        		var record= grid.getSelectionModel().getSelection();

        if(record[0]){


        	Ext.Msg.show({
                         title:'Delete?',
                         msg: 'Are you sure you want to delete this Product?',
                         buttons: Ext.Msg.YESNO,
                         icon: Ext.Msg.QUESTION,
                         fn: function (buttonId){
                            if (buttonId == 'yes'){
                                Ext.Ajax.request({
                                    url: '/cobuy/index.php?r=Product/DeleteThisProduct',
                                    params: {
                                        id: record[0].get('id')

                                    },
                                    success: function(conn, response, options, eOpts) {

                                        var result = Ext.JSON.decode(conn.responseText);

                                        if (result.success) {

                                            Ext.Msg.alert('Success!', result.msg);
                                            grid.getStore().load();

                                        } else {
                                            var error = Ext.JSON.decode(conn.responseText);
                                            Ext.Msg.alert('Error', error.msg);
                                        }
                                    },
                                    failure: function(conn, response, options, eOpts) {

                                        Ext.Msg.alert('Failure', 'Communication Error');
                                    }
                                });
                            }
                         }
                    });

        }else {
        				Ext.Msg.alert('Error', 'Please Select a Product to delete');
        		}

    },

    onSaveNewProductButtonClick: function(button, e, eOpts) {
        var win = button.up('window'),
        			formPanel = win.down('form'),
        			store = this.getAllProductsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
        					url: '/cobuy/index.php?r=Product/createNewProduct',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							store.load();

        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
    },

    onSaveEdittedProductButtonClick: function(button, e, eOpts) {
        var win = button.up('window'),
        			formPanel = win.down('form'),
        			store = this.getAllProductsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
        					url: '/cobuy/index.php?r=Product/updateProduct',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							store.load();

        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
    },

    onProductGridpanelItemDblClick: function(dataview, record, item, index, e, eOpts) {
        this.onEditProductButtonClick();
    },

    onProductPanelRender: function(component, eOpts) {
        component.down('grid').getStore().load();
    },

    onNextProductButtonClick: function(button, e, eOpts) {
        //get the active card

        var win = button.up('window');

        var form  = win.down('allproductdetailform');

        var form_layout = form.getLayout();

        var item = form_layout .getNext();

        if(item.getXType() == 'thisproductspecificationform' ){
            //change the button text to payment
          win.down('#saveBtn').setVisible(true);
          Ext.getCmp('next_product').setVisible(false);
        }

    },

    onEditingNextProductButtonClick: function(button, e, eOpts) {
        //get the active card

        var win = button.up('window');

        var form  = win.down('allproductdetailform');

        var form_layout = form.getLayout();

        var item = form_layout .getNext();

        if(item.getXType() == 'thisproductspecificationform' ){
            //change the button text to payment
          win.down('#saveBtn').setVisible(true);
          Ext.getCmp('next_product').setVisible(false);
        }

    },

    onPreviousProductButtonClick: function(button, e, eOpts) {
        //get the active card

        var win = button.up('window');

        var form  = win.down('allproductdetailform');

        var form_layout = form.getLayout();

        var item = form_layout .getPrev();


        if(item.getXType() == 'productfeaturesform' ){

          win.down('#saveBtn').setVisible(false);
          Ext.getCmp('next_product').setVisible(true);

        }
    },

    onEdittingPreviousProductButtonClick: function(button, e, eOpts) {
        //get the active card

        var win = button.up('window');

        var form  = win.down('allproductdetailform');

        var form_layout = form.getLayout();

        var item = form_layout .getPrev();


        if(item.getXType() == 'productfeaturesform' ){

          win.down('#saveBtn').setVisible(false);
          Ext.getCmp('next_product').setVisible(true);

        }
    },

    onZeroriseThisProductOrPackPricesButtonClick: function(button, e, eOpts) {
        var grid = this.getAllProductsGrid(),
        		record = grid.getSelectionModel().getSelection();

        if(record[0]) {
            Ext.Msg.show({
                         title:'Delete?',
                         msg: 'Are you sure you want to zerorise this Product or Pack prices?',
                         buttons: Ext.Msg.YESNO,
                         icon: Ext.Msg.QUESTION,
                         fn: function (buttonId){
                            if (buttonId == 'yes'){
                                Ext.Ajax.request({
                                    url: '/cobuy/index.php?r=Product/zerorisethisproductprice',
                                    params: {
                                        id: record[0].get('id')

                                    },
                                    success: function(conn, response, options, eOpts) {

                                        var result = Ext.JSON.decode(conn.responseText);

                                        if (result.success) {

                                            Ext.Msg.alert('Success!', result.msg);
                                            grid.getStore().load();

                                        } else {
                                            var error = Ext.JSON.decode(conn.responseText);
                                            Ext.Msg.alert('Error', error.msg);
                                        }
                                    },
                                    failure: function(conn, response, options, eOpts) {

                                        Ext.Msg.alert('Failure', 'Communication Error');
                                    }
                                });
                            }
                         }
                    });

        }else{
            Ext.Msg.alert('Error!', 'Please Select a Product or Pack to zerorise it prices');
        }
    },

    onCategoryComboboxSelect: function(combo, records, eOpts) {
        var win = combo.up('window');

        //clear both the category and the product type combo

        win.down('#typeCombo').clearValue();

        //get the value of the selected category

        var category_id = combo.getValue();
        //get the service id

        var service_id = win.down('#serviceCombo').getValue();

        //load the product category store for this service

        win.down('#typeCombo').getStore().load({

            params:{
                category_id:category_id,
                service_id:service_id
            }
        });
    },

    onServiceComboboxSelect: function(combo, records, eOpts) {
        var win = combo.up('window');

        //clear both the category and the product type combo

        win.down('#categoryCombo').reset();

        win.down('#typeCombo').reset();

        //get the value of the selected service

        var service_id = combo.getValue();

        //load the product category store for this service

        win.down('#categoryCombo').getStore().load({

            params:{
                service_id:service_id
            }
        });

        //load the type combo

        win.down('#typeCombo').getStore().load({

            params:{
                category_id:0,
                service_id:service_id
            }
        });
    },

    onIsQuotableCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue === 1 || newValue === true){

            win.down('#prevailingPrice').setDisabled(true);
            win.down('#memberPrice').setDisabled(true);

        }else{
            win.down('#prevailingPrice').setDisabled(false);
            win.down('#memberPrice').setDisabled(false);

        }
    },

    onIsVideoIncludedCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){
            win.down('#videoForThisPurpose').setDisabled(false);
             win.down('#videoFilename').setDisabled(false);
        }else{
           win.down('#videoForThisPurpose').setDisabled(true);
             win.down('#videoFilename').setDisabled(true);
        }
    },

    onAddingAndRemovingProductsFromHamperButtonClick: function(button, e, eOpts) {
        var win = Ext.create('cobuy.view.AddingProductsToHamperWin');

        win.show();
    },

    onIsHamperCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){
            if(oldValue == 1 || oldValue == true){
                 win.down('#displayproductCheckbox').reset();
                win.down('#displayproductCheckbox').setDisabled(true);
            }else{
                win.down('#displayproductCheckbox').setDisabled(true);
            }

           win.down('#prevailingPrice').setReadOnly(true);
           win.down('#memberPrice').setReadOnly(true);
        }else{
             win.down('#displayproductCheckbox').setDisabled(false);
             win.down('#prevailingPrice').setReadOnly(false);
            win.down('#memberPrice').setReadOnly(false);
        }
    },

    onRentableCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {

        var win = field.up('window');

        if(newValue == 1 || newValue == true){

            win.down('#rentableContainer').setVisible(true);

            win.down('#faasCheckbox').setDisabled(true);
             win.down('#faasContainer').setVisible(false);
             win.down('#isPayableOnDelivery').setDisabled(true);
            win.down('#faasCheckbox').reset();
             win.down('#rentParameterContainer').setVisible(true);
        }else{
            win.down('#rentableContainer').setVisible(false);

             win.down('#rentParameterContainer').setVisible(false);

           // win.down('#faasCheckbox').setDisabled(false);
            if(win.down('#paasCheckbox').getValue() == 1 || win.down('#paasCheckbox').getValue()==true ){
                win.down('#isPayableOnDelivery').setDisabled(true);
            }else{
                win.down('#isPayableOnDelivery').setDisabled(false);
            }

        }
    },

    onFaaSCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){

            win.down('#rentableContainer').setVisible(false);
            win.down('#rentableCheckbox').setDisabled(true);
             win.down('#paasCheckbox').setDisabled(true);

           win.down('#rentableCheckbox').reset();
           win.down('#paasCheckbox').reset();

             win.down('#faasContainer').setVisible(true);
             win.down('#isPayableOnDelivery').setDisabled(true);
        }else{
           win.down('#faasContainer').setVisible(false);
           // win.down('#rentableCheckbox').setDisabled(false);
            // win.down('#paasCheckbox').setDisabled(false);
             win.down('#isPayableOnDelivery').setDisabled(false);

        }
    },

    onPaaSCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){

             win.down('#rentableCheckbox').setDisabled(false);
             win.down('#faasCheckbox').setDisabled(true);

            win.down('#faasCheckbox').reset();

            // win.down('#faasContainer').setVisible(false);
             win.down('#isPayableOnDelivery').setDisabled(true);
        }else{
           // win.down('#faasCheckbox').setDisabled(false);

            if(win.down('#rentableCheckbox').getValue() == 1 || win.down('#rentableCheckbox').getValue()==true ){
                win.down('#isPayableOnDelivery').setDisabled(true);
            }else{
                win.down('#isPayableOnDelivery').setDisabled(false);
            }

        }
    },

    onProductInsuredCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){

            win.down('#insuranceContainer').setDisabled(false);
            win.down('#insuranceContainer').down('textfield').reset();
             win.down('#insuranceContainer').down('numberfield').reset();
             win.down('#insuranceContainer').down('textareafield').reset();

        }else{
            win.down('#insuranceContainer').setDisabled(true);
             win.down('#insuranceContainer').down('textfield').reset();
             win.down('#insuranceContainer').down('numberfield').reset();
             win.down('#insuranceContainer').down('textareafield').reset();
        }
    },

    onHasWarrantyCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){
            win.down('#warrantyNumberfield').setDisabled(false);
             win.down('#warrantyNumberfield').reset();
        }else{
             win.down('#warrantyNumberfield').setDisabled(true);
             win.down('#warrantyNumberfield').reset();
        }
    },

    onModifyThisProductQuantityButtonClick: function(button, e, eOpts) {
        var grid = this.getAllProductsGrid(),
        		record = grid.getSelectionModel().getSelection();

        		if(record[0]) {
        			var editWin = Ext.create('cobuy.view.ModifyingProductStockQuantityWin');
        			var form = editWin.down('form');


        			Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/obtainPrductExtraInformation',
        			     params: {
        					category_id: record[0].get('category_id'),
                            service_id: record[0].get('service_id'),
                            product_type_id: record[0].get('product_type_id'),
                            product_id: record[0].get('id')
        				},
                     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var category = jsonResponse.category;
                                var service = jsonResponse.service;
                                var producttype = jsonResponse.producttype;

                            }

        				/**	var values = {
        						category_id: category,
        						service_id: service,
        						product_type_id: producttype




        					};
                            **/


        					form.loadRecord(record[0]);

        					//form.getForm().setValues(values);


        				}




        			});


        			editWin.show();
        		} else {
        				Ext.Msg.alert('Error!', 'Please Select a Product to edit');
        		}
    },

    onAddQuantityToStockRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){

            win.down('#addnewquantityNumberfield').setDisabled(false);

            win.down('#removequantityNumberfield').setDisabled(true);
        }else{
            win.down('#addnewquantityNumberfield').setDisabled(true);

        }
    },

    onRemoveQuantityFromStockRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 1 || newValue == true){

            win.down('#addnewquantityNumberfield').setDisabled(true);

            win.down('#removequantityNumberfield').setDisabled(false);
        }else{
            win.down('#removequantityNumberfield').setDisabled(true);

        }
    },

    onModifyTheStockQunatityButtonClick: function(button, e, eOpts) {
        var win = button.up('window'),
        			formPanel = win.down('form'),
        			store = this.getAllProductsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
        					url: '/cobuy/index.php?r=Product/modifyStockQuantity',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							store.load();

        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
    },

    onAddOrRemoveFromAdvertPlacementButtonClick: function(button, e, eOpts) {
        var grid = this.getAllProductsGrid(),
        		record = grid.getSelectionModel().getSelection();

        		if(record[0]) {
        			var editWin = Ext.create('cobuy.view.AddRemoveProductFromMiddlePageAdvertWin');
        			var form = editWin.down('form');


        			Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/obtainPrductExtraInformation',
        			     params: {
        					category_id: record[0].get('category_id'),
                            service_id: record[0].get('service_id'),
                            product_type_id: record[0].get('product_type_id'),
                            product_id: record[0].get('id')
        				},
                     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var category = jsonResponse.category;
                                var service = jsonResponse.service;
                                var producttype = jsonResponse.producttype;

                            }

        				/**	var values = {
        						category_id: category,
        						service_id: service,
        						product_type_id: producttype




        					};
                            **/


        					form.loadRecord(record[0]);

        					//form.getForm().setValues(values);


        				}




        			});


        			editWin.show();
        		} else {
        				Ext.Msg.alert('Error!', 'Please Select a Product to edit');
        		}
    },

    onPlaciingOrRemovingProductOnMiddlePageAdvertButtonClick: function(button, e, eOpts) {
        var win = button.up('window'),
        			formPanel = win.down('form'),
        			store = this.getAllProductsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
        					url: '/cobuy/index.php?r=Product/modifyProductMiddleAdvertPlacementStatus',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							store.load();

        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
    },

    onNatureOfProductComboboxChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue =='book'){
            win.down('#booksContainer').setVisible(true);
            win.down('#clothesContainer').setVisible(false);
            win.down('#graphicsContainer').setVisible(false);
            win.down('#footagesContainer').setVisible(false);
             win.down('#soundsContainer').setVisible(false);
            win.down('#shoesContainer').setVisible(false);
            win.down('#rentableContainer').setVisible(false);
            win.down('#faasContainer').setVisible(false);
             win.down('#rentableCheckbox').setDisabled(false);
             win.down('#paasCheckbox').setDisabled(false);
            win.down('#faasCheckbox').setDisabled(true);
             win.down('#rentableCheckbox').reset();
           win.down('#paasCheckbox').reset();
            win.down('#faasCheckbox').reset();
             win.down('#clothesextraparameterContainer').setVisible(false);
            win.down('#rentableContainer').setVisible(false);
            //set the minimum year of print
            win.down('#bookyearofprintField').setMinValue(1001);



        }else if(newValue =='clothes'){
           win.down('#booksContainer').setVisible(false);
            win.down('#clothesContainer').setVisible(true);
            win.down('#graphicsContainer').setVisible(false);
            win.down('#footagesContainer').setVisible(false);
            win.down('#soundsContainer').setVisible(false);
            win.down('#shoesContainer').setVisible(false);
            win.down('#rentableContainer').setVisible(false);
            win.down('#faasContainer').setVisible(false);
             win.down('#rentableCheckbox').setDisabled(false);
             win.down('#clothesextraparameterContainer').setVisible(true);
             win.down('#rentParameterContainer').setVisible(false);
             win.down('#paasCheckbox').setDisabled(false);
            win.down('#faasCheckbox').setDisabled(true);
            win.down('#rentableCheckbox').reset();
           win.down('#paasCheckbox').reset();
            win.down('#faasCheckbox').reset();
        }else if(newValue =='graphics'){
             win.down('#booksContainer').setVisible(false);
            win.down('#clothesContainer').setVisible(false);
            win.down('#graphicsContainer').setVisible(true);
            win.down('#footagesContainer').setVisible(false);
            win.down('#soundsContainer').setVisible(false);
            win.down('#shoesContainer').setVisible(false);
            win.down('#rentableContainer').setVisible(false);
            win.down('#faasContainer').setVisible(false);
             win.down('#rentableCheckbox').setDisabled(true);
             win.down('#paasCheckbox').setDisabled(true);
            win.down('#faasCheckbox').setDisabled(true);
             win.down('#rentableCheckbox').reset();
           win.down('#paasCheckbox').reset();
            win.down('#faasCheckbox').reset();
             win.down('#clothesextraparameterContainer').setVisible(false);
            win.down('#rentableContainer').setVisible(false);
        }else if(newValue =='video'){
             win.down('#booksContainer').setVisible(false);
            win.down('#clothesContainer').setVisible(false);
            win.down('#graphicsContainer').setVisible(false);
            win.down('#footagesContainer').setVisible(true);
            win.down('#soundsContainer').setVisible(false);
            win.down('#shoesContainer').setVisible(false);
            win.down('#rentableContainer').setVisible(false);
            win.down('#faasContainer').setVisible(false);
             win.down('#rentableCheckbox').setDisabled(true);
             win.down('#paasCheckbox').setDisabled(true);
            win.down('#faasCheckbox').setDisabled(true);
             win.down('#rentableCheckbox').reset();
           win.down('#paasCheckbox').reset();
            win.down('#faasCheckbox').reset();
            win.down('#clothesextraparameterContainer').setVisible(false);
            win.down('#rentableContainer').setVisible(false);

        }else if(newValue =='shoes'){
             win.down('#booksContainer').setVisible(false);
            win.down('#clothesContainer').setVisible(false);
            win.down('#graphicsContainer').setVisible(false);
            win.down('#footagesContainer').setVisible(false);
            win.down('#soundsContainer').setVisible(false);
            win.down('#shoesContainer').setVisible(true);
            win.down('#rentableContainer').setVisible(false);
            win.down('#faasContainer').setVisible(false);
             win.down('#rentableCheckbox').setDisabled(false);
             win.down('#paasCheckbox').setDisabled(false);
            win.down('#faasCheckbox').setDisabled(true);
             win.down('#rentableCheckbox').reset();
           win.down('#paasCheckbox').reset();
            win.down('#faasCheckbox').reset();
            win.down('#clothesextraparameterContainer').setVisible(false);
            win.down('#rentableContainer').setVisible(false);
        }else if(newValue =='faas'){
             win.down('#booksContainer').setVisible(false);
            win.down('#clothesContainer').setVisible(false);
            win.down('#graphicsContainer').setVisible(false);
            win.down('#footagesContainer').setVisible(false);
            win.down('#soundsContainer').setVisible(false);
            win.down('#shoesContainer').setVisible(false);
            win.down('#rentableContainer').setVisible(false);
            win.down('#faasContainer').setVisible(true);
             win.down('#rentableCheckbox').setDisabled(true);
             win.down('#paasCheckbox').setDisabled(true);
            win.down('#faasCheckbox').setDisabled(false);
             win.down('#rentableCheckbox').reset();
           win.down('#paasCheckbox').reset();
            win.down('#faasCheckbox').reset();
            win.down('#clothesextraparameterContainer').setVisible(false);
            win.down('#rentableContainer').setVisible(false);

        }else if(newValue =='general'){
             win.down('#booksContainer').setVisible(false);
            win.down('#clothesContainer').setVisible(false);
            win.down('#graphicsContainer').setVisible(false);
            win.down('#footagesContainer').setVisible(false);
            win.down('#soundsContainer').setVisible(false);
            win.down('#shoesContainer').setVisible(false);
            win.down('#rentableContainer').setVisible(false);
            win.down('#faasContainer').setVisible(false);
             win.down('#rentableCheckbox').setDisabled(false);
             win.down('#paasCheckbox').setDisabled(false);
            win.down('#faasCheckbox').setDisabled(true);
             win.down('#rentableCheckbox').reset();
           win.down('#paasCheckbox').reset();
            win.down('#faasCheckbox').reset();
            win.down('#clothesextraparameterContainer').setVisible(false);
            win.down('#rentableContainer').setVisible(false);


        }else if(newValue =='sound'){
             win.down('#booksContainer').setVisible(false);
            win.down('#clothesContainer').setVisible(false);
            win.down('#graphicsContainer').setVisible(false);
            win.down('#footagesContainer').setVisible(false);
            win.down('#soundsContainer').setVisible(true);
            win.down('#shoesContainer').setVisible(false);
            win.down('#rentableContainer').setVisible(false);
            win.down('#faasContainer').setVisible(false);
             win.down('#rentableCheckbox').setDisabled(true);
             win.down('#paasCheckbox').setDisabled(true);
            win.down('#faasCheckbox').setDisabled(true);
             win.down('#rentableCheckbox').reset();
           win.down('#paasCheckbox').reset();
            win.down('#faasCheckbox').reset();
            win.down('#clothesextraparameterContainer').setVisible(false);
            win.down('#rentableContainer').setVisible(false);

        }
    },

    onDesignedForComboboxChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 'male'){
            win.down('#menShoeCombo').setDisabled(false);
            win.down('#womenShoesCombo').setDisabled(true);
            win.down('#womenShoesCombo').reset();
        }else if(newValue == 'female'){
             win.down('#menShoeCombo').setDisabled(true);
            win.down('#womenShoesCombo').setDisabled(false);
             win.down('#menShoeCombo').reset();
        }else if(newValue == 'unisex'){
            win.down('#menShoeCombo').setDisabled(false);
            win.down('#womenShoesCombo').setDisabled(true);
             win.down('#womenShoesCombo').reset();
        }
    },

    onTargetComboboxChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 'preteens'){
            win.down('#babyAgeRange').setDisabled(false);
        }else if(newValue == 'babies'){
            win.down('#babyAgeRange').setDisabled(false);
        }else{
            win.down('#babyAgeRange').setDisabled(true);
        }
    },

    onBookFormatComboboxChange: function(field, newValue, oldValue, eOpts) {
        var win = field.up('window');

        if(newValue == 'softcopy'){
            win.down('#softcopyFile').setDisabled(false);
        }else{
           win.down('#softcopyFile').setDisabled(true);
        }
    },

    onAddAProductVariationButtonClick: function(button, e, eOpts) {

        var grid = this.getAllProductsGrid(),
        		record = grid.getSelectionModel().getSelection();

        		if(record[0]) {
        			var editWin = Ext.create('cobuy.view.NewProductWin');
        			var form = editWin.down('form');

                     editWin.down('#maximumQuantityNumberfield').setReadOnly(true);

        			Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Product/obtainPrductExtraInformation',
        			     params: {
        					category_id: record[0].get('category_id'),
                            service_id: record[0].get('service_id'),
                            product_type_id: record[0].get('product_type_id'),
                            product_id: record[0].get('id')
        				},
                     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var category = jsonResponse.category;
                                var service = jsonResponse.service;
                                var producttype = jsonResponse.producttype;
                                var mainview = jsonResponse.product.icon;
                                var frontview = jsonResponse.product.product_front_view;
                                var backview = jsonResponse.product.product_back_view;
                                var rightsideview = jsonResponse.product.product_right_side_view;
                                var leftsideview = jsonResponse.product.product_left_side_view;
                                var topview = jsonResponse.product.product_top_view;
                                var bottomview = jsonResponse.product.product_bottom_view;
                                var contentview = jsonResponse.product.product_contents_or_booth_view;
                                var insidefrontview = jsonResponse.product.product_inside_view;
                                var insidedashboardview = jsonResponse.product.product_dashboard_view;
                                var engineview = jsonResponse.product.product_engine_view;
                                var headlineview = jsonResponse.product.headline_image;
                                var keywordSize = jsonResponse.size;

                                if(keywordSize == 0){
                                    var keyword1=" ";
                                    var keyword2=" ";
                                    var keyword3=" ";
                                    var keyword4=" ";
                                    var keyword5=" ";
                                }else if(keywordSize == 1){
                                    var keyword1= jsonResponse.keyword[0].keyword;
                                    var keyword2=" ";
                                    var keyword3=" ";
                                    var keyword4=" ";
                                    var keyword5=" ";
                                }else if(keywordSize == 2){
                                    var keyword1= jsonResponse.keyword[0].keyword;
                                    var keyword2= jsonResponse.keyword[1].keyword;
                                    var keyword3=" ";
                                    var keyword4=" ";
                                    var keyword5=" ";
                                }else if(keywordSize == 3){
                                    var keyword1= jsonResponse.keyword[0].keyword;
                                    var keyword2= jsonResponse.keyword[1].keyword;
                                    var keyword3= jsonResponse.keyword[2].keyword;
                                    var keyword4=" ";
                                    var keyword5=" ";
                                }else if(keywordSize == 4){
                                    var keyword1= jsonResponse.keyword[0].keyword;
                                    var keyword2= jsonResponse.keyword[1].keyword;
                                    var keyword3= jsonResponse.keyword[2].keyword;
                                    var keyword4= jsonResponse.keyword[3].keyword;
                                    var keyword5=" ";
                                }else if(keywordSize == 5){
                                    var keyword1= jsonResponse.keyword[0].keyword;
                                    var keyword2= jsonResponse.keyword[1].keyword;
                                    var keyword3= jsonResponse.keyword[2].keyword;
                                    var keyword4= jsonResponse.keyword[3].keyword;
                                    var keyword5= jsonResponse.keyword[4].keyword;
                                }


                              console.log('the first keyword is:',keyword1);

                                console.log('the second keyword is:',keyword2);

                                //get the handle to the image

                            var mainview_image = editWin.down('#mainviewImg');
                            var frontview_image = editWin.down('#frontviewImg');
                            var backview_image = editWin.down('#backviewImg');
                            var rightsideview_image = editWin.down('#rightsideviewImg');
                            var leftsideview_image = editWin.down('#leftsideviewImg');
                            var topview_image = editWin.down('#topviewImg');
                            var bottomview_image = editWin.down('#bottomviewImg');
                            var contentview_image = editWin.down('#contentviewImg');
                            var insideview_image = editWin.down('#insidefrontviewImg');
                            var insidedashboardview_image = editWin.down('#insidedashboardImg');
                            var engineview_image = editWin.down('#engineviewImg');
                            var headline_image = editWin.down('#headlineImg');


                                //disable the classification combo
                                editWin.down('#natureOfProductCombo').setReadOnly(true);
                            //get the image source
                                if(mainview != null){
                                     mainview_image.setSrc('../../cobuy_images/icons' + '/' + mainview);
                                }


                            //set the title of the fieldser
                            //component.down('#mainFieldset').setTitle('Some Cool Complete Image');

                                if(frontview != null){
                                    frontview_image.setSrc('../../cobuy_images/icons' + '/' + frontview);
                                }

                           // component.down('#frontFieldset').setTitle('Some Cool Complete Front Image');
                                if(backview != null){
                                    backview_image.setSrc('../../cobuy_images/icons' + '/' + backview);
                                }

                                if(rightsideview != null){
                                     rightsideview_image.setSrc('../../cobuy_images/icons' + '/' + rightsideview);
                                }

                                if(leftsideview != null){
                                    leftsideview_image.setSrc('../../cobuy_images/icons' + '/' + leftsideview);

                                }

                                if(topview!= null){
                                     topview_image.setSrc('../../cobuy_images/icons' + '/' + topview);
                                }

                                if(bottomview != null){
                                    bottomview_image.setSrc('../../cobuy_images/icons' + '/' + bottomview);
                                }

                                if(contentview != null){
                                     contentview_image.setSrc('../../cobuy_images/icons' + '/' + contentview);
                                }

                                if(insidefrontview != null){
                                    insideview_image.setSrc('../../cobuy_images/icons' + '/' + insidefrontview);
                                }

                                if(insidedashboardview != null){
                                    insidedashboardview_image.setSrc('../../cobuy_images/icons' + '/' + insidedashboardview);
                                }

                                if(engineview != null){
                                    engineview_image.setSrc('../../cobuy_images/icons' + '/' + engineview);
                                }

                                if(headlineview != null){
                                     headline_image.setSrc('../../cobuy_images/posters' + '/' + headlineview);
                                }






        					}

        					var values = {
        						category: category,
        						service: service,
        						product_type: producttype,
                                target:0,
                                keyword1:keyword1,
                                keyword2:keyword2,
                                keyword3:keyword3,
                                keyword4:keyword4,
                                keyword5:keyword5,
                                product_variation_id:record[0].get('id'),
                                is_a_variation:1,

        					};


        					form.loadRecord(record[0]);

        					form.getForm().setValues(values);


        				}




        			});


        			editWin.show();
        		} else {
        				Ext.Msg.alert('Sorry', 'Please Select a Product to add its variation');
        		}
    },

    onProductGridpanelItemClick: function(dataview, record, item, index, e, eOpts) {
        var panel = dataview.up('productmainpanel');

        if(record.get('is_a_variation') == 1 || record.get('is_a_variation') == true){
            panel.down('#makevariationBtn').setDisabled(true);
            panel.down('#addvariationBtn').setDisabled(true);
             panel.down('#releasevariationBtn').setDisabled(false);
        }else{
            panel.down('#releasevariationBtn').setDisabled(true);
             panel.down('#makevariationBtn').setDisabled(false);
            panel.down('#addvariationBtn').setDisabled(false);
        }


    },

    init: function(application) {
        this.control({
            "productmainpanel button#addBtn": {
                click: this.onAddProductButtonClick
            },
            "productmainpanel button#editBtn": {
                click: this.onEditProductButtonClick
            },
            "productmainpanel button#deleteBtn": {
                click: this.onDeleteProductButtonClick
            },
            "newproductwin button#saveBtn": {
                click: this.onSaveNewProductButtonClick
            },
            "editproductwin button#saveBtn": {
                click: this.onSaveEdittedProductButtonClick
            },
            "productmainpanel grid": {
                itemdblclick: this.onProductGridpanelItemDblClick,
                itemclick: this.onProductGridpanelItemClick
            },
            "productmainpanel": {
                render: this.onProductPanelRender
            },
            "newproductwin button#next_product": {
                click: this.onNextProductButtonClick
            },
            "editproductwin button#next_product": {
                click: this.onEditingNextProductButtonClick
            },
            "newproductwin button#previous_product": {
                click: this.onPreviousProductButtonClick
            },
            "editproductwin button#previous_product": {
                click: this.onEdittingPreviousProductButtonClick
            },
            "productmainpanel button#zeroriseBtn": {
                click: this.onZeroriseThisProductOrPackPricesButtonClick
            },
            "combobox#categoryCombo": {
                select: this.onCategoryComboboxSelect
            },
            "combobox#serviceCombo": {
                select: this.onServiceComboboxSelect
            },
            "checkboxfield#isQuotableCheckbox": {
                change: this.onIsQuotableCheckboxfieldChange
            },
            "checkboxfield#isVideoIncluded": {
                change: this.onIsVideoIncludedCheckboxfieldChange
            },
            "productmainpanel button#hamperBtn": {
                click: this.onAddingAndRemovingProductsFromHamperButtonClick
            },
            "checkboxfield#hamperCheckbox": {
                change: this.onIsHamperCheckboxfieldChange
            },
            "checkboxfield#rentableCheckbox": {
                change: this.onRentableCheckboxfieldChange
            },
            "checkboxfield#faasCheckbox": {
                change: this.onFaaSCheckboxfieldChange
            },
            "checkboxfield#paasCheckbox": {
                change: this.onPaaSCheckboxfieldChange
            },
            "checkboxfield#insuredCheckbox": {
                change: this.onProductInsuredCheckboxfieldChange
            },
            "checkboxfield#hasWarrantyCheckbox": {
                change: this.onHasWarrantyCheckboxfieldChange
            },
            "button#modifyQuantityBtn": {
                click: this.onModifyThisProductQuantityButtonClick
            },
            "radiofield#addquantityRadio": {
                change: this.onAddQuantityToStockRadiofieldChange
            },
            "radiofield#removequantityRadio": {
                change: this.onRemoveQuantityFromStockRadiofieldChange
            },
            "button#modifyBtn": {
                click: this.onModifyTheStockQunatityButtonClick
            },
            "button#addtomiddleadvertBtn": {
                click: this.onAddOrRemoveFromAdvertPlacementButtonClick
            },
            "button#advertplacementBtn": {
                click: this.onPlaciingOrRemovingProductOnMiddlePageAdvertButtonClick
            },
            "combobox#natureOfProductCombo": {
                change: this.onNatureOfProductComboboxChange
            },
            "combobox#designedforCombo": {
                change: this.onDesignedForComboboxChange
            },
            "combobox#targetCombo": {
                change: this.onTargetComboboxChange
            },
            "combobox#bookformatCombo": {
                change: this.onBookFormatComboboxChange
            },
            "button#addvariationBtn": {
                click: this.onAddAProductVariationButtonClick
            }
        });
    }

});
