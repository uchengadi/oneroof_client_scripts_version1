/*
 * File: app/controller/AllPaymentsController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('cobuy.controller.AllPaymentsController', {
    extend: 'Ext.app.Controller',

    models: [
        'Payment'
    ],
    stores: [
        'Payments'
    ],
    views: [
        'AllPaymentsMainpanel',
        'TheAllPaymentWin',
        'AlreadyVerifiedPaymentWin'
    ],

    refs: [
        {
            ref: 'allPaymentsGrid',
            selector: 'allpaymentsmainpanel grid'
        }
    ],

    onEditAllPaymentsButtonClick: function(button, e, eOpts) {
        var grid = this.getAllPaymentsGrid(),
        		record = grid.getSelectionModel().getSelection();



            if(record[0]) {
                if(Ext.String.uncapitalize(record[0].get('status')) == 'pending' || Ext.String.uncapitalize(record[0].get('status')) == 'unconfirmed' || Ext.String.uncapitalize(record[0].get('status')) == 'failed'){
                    var editWin = Ext.create('cobuy.view.EditPaymenyWin');

                }else if(Ext.String.uncapitalize(record[0].get('status'))=='confirmed'){
                   var editWin = Ext.create('cobuy.view.AlreadyVerifiedPaymentWin');
                }

        	  var form = editWin.down('form');


        			Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Payment/retrievePaymentDetailsForUpdate',
        			     params: {
        					id: record[0].get('id'),
                            order_id:record[0].get('order_id'),
                             bank_account_id:record[0].get('bank_account_id')
        				},
                     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var bank_account = jsonResponse.bank_number;
                                var order_number = jsonResponse.order_number;
                                var amount_in_bank= record[0].get('gross_amount') + record[0].get('delivery_charges');

        					}

        					var values = {

                                bank_account:bank_account,
                                order_number:order_number,
                                gross_amount_for_display:Ext.util.Format.number(record[0].get('gross_amount'),'0,000.00'),
                                net_amount_for_display:Ext.util.Format.number(record[0].get('net_amount'),'0,000.00'),
                                discounted_amount_for_display:Ext.util.Format.number(record[0].get('discounted_amount'),'0,000.00'),
                                vat_for_display:Ext.util.Format.number(record[0].get('vat'),'0,000.00'),
                                revenue_for_display:Ext.util.Format.number(record[0].get('revenue'),'0,000.00'),
                                delivery_charges:Ext.util.Format.number(record[0].get('delivery_charges'),'0,000.00'),
                                amount_in_bank:Ext.util.Format.number(amount_in_bank,'0,000.00')


        					};


        					form.loadRecord(record[0]);

        					form.getForm().setValues(values);


        				}




        			});


        			editWin.show();
        		} else {
        				Ext.Msg.alert('Error!', 'Please Select the Payment to view');
        		}







    },

    onSaveThisEditedPaymentButtonClick: function(button, e, eOpts) {
        var win = button.up('window'),
        			formPanel = win.down('form'),
        			store = this.getAllPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Payment/editPayment',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							store.load();

        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
    },

    onAllPaymentPanelRender: function(component, eOpts) {
        component.down('grid').getStore().load();
    },

    onAddNewSubscriptionPaymentButtonClick: function(button, e, eOpts) {
        var win = Ext.create('cobuy.view.TheAllPaymentWin');

        win.show();
    },

    onSaveNewPaymentButtonClick: function(button, e, eOpts) {
        var win = button.up('window'),
        			formPanel = win.down('form'),
        			store = this.getAllPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Payment/addNewPayment',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							store.load();

        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
    },

    onPaymentOrderComboboxChange: function(field, newValue, oldValue, eOpts) {
        /**var win = field.up('window');

        var form = win.down('form');


        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=payment/retrievePaymentDetails',
        			     params: {
        					order_id: newValue
        				},
                     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var gross_amount = jsonResponse.gross_amount;
                                var net_amount = jsonResponse.net_amount;
                                var discount_amount = jsonResponse.discount_amount;
                                var vat =jsonResponse.vat;
                                var revenue = jsonResponse.revenue;
                                var invoice_number = jsonResponse.invoice_number;


        					}

        					var values = {

                                invoice_number:invoice_number,
                                gross_amount:gross_amount,
                                net_amount:net_amount,
                                discounted_amount:discount_amount,
                                revenue:revenue,
                                vat:vat



        					};


        					//form.loadRecord(record[0]);

        					form.getForm().setValues(values);


        				}




        			});

                    **/


    },

    onSaveEdittedPaymentButtonClick: function(button, e, eOpts) {
        var win = button.up('window'),
        			formPanel = win.down('form'),
        			store = this.getAllPaymentsGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
                            url: '/cobuy/index.php?r=Payment/updatePayment',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							store.load();

        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
    },

    onAllPaymentGridpanelItemDblClick: function(dataview, record, item, index, e, eOpts) {
        this.onEditAllPaymentsButtonClick();
    },

    onBankAccountComboboxSelect: function(combo, records, eOpts) {
        var win = combo.up('window');

        var form = win.down('form');

        console.log('the new value is:', combo.getValue());

        var values = {
            bank_account_id:combo.getValue()
        };

        form.getForm().setValues(values);


    },

    onOrderComboboxSelect: function(combo, records, eOpts) {
        var win = combo.up('window');

        var form = win.down('form');

        Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=Payment/retrievePaymentDetails',
        			     params: {
        					order_id: combo.getValue()
        				},
                     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var gross_amount = jsonResponse.gross_amount;
                                var net_amount = jsonResponse.net_amount;
                                var discount_amount = jsonResponse.discount_amount;
                                var vat =jsonResponse.vat;
                                var revenue = jsonResponse.revenue;
                                var invoice_number = jsonResponse.invoice_number;


        					}

        					var values = {

                                invoice_number:invoice_number,
                                gross_amount:gross_amount,
                                gross_amount_for_display:Ext.util.Format.number(gross_amount,'0,000.00'),
                                net_amount:net_amount,
                                net_amount_for_display:Ext.util.Format.number(net_amount,'0,000.00'),
                                discounted_amount:discount_amount,
                                discounted_amount_for_display:Ext.util.Format.number(discount_amount,'0,000.00'),
                                revenue:revenue,
                                revenue_for_display:Ext.util.Format.number(revenue,'0,000.00'),
                                vat:vat,
                                vat_for_display:Ext.util.Format.number(vat,'0,000.00'),
                                order_id:combo.getValue()



        					};


        					//form.loadRecord(record[0]);

        					form.getForm().setValues(values);


        				}




        			});

    },

    onOkTheVerifiedPaymentButtonClick: function(button, e, eOpts) {
        var win = button.up('window');

        win.destroy();
    },

    init: function(application) {
        this.control({
            "allpaymentsmainpanel button#editBtn": {
                click: this.onEditAllPaymentsButtonClick
            },
            "theallpaymentwin button#editBtn": {
                click: this.onSaveThisEditedPaymentButtonClick
            },
            "allpaymentsmainpanel": {
                render: this.onAllPaymentPanelRender
            },
            "allpaymentsmainpanel button#addBtn": {
                click: this.onAddNewSubscriptionPaymentButtonClick
            },
            "theallpaymentwin button#addBtn": {
                click: this.onSaveNewPaymentButtonClick
            },
            "combobox#orderCombo": {
                change: this.onPaymentOrderComboboxChange,
                select: this.onOrderComboboxSelect
            },
            "editpaymenywin button#editBtn": {
                click: this.onSaveEdittedPaymentButtonClick
            },
            "allpaymentsmainpanel grid": {
                itemdblclick: this.onAllPaymentGridpanelItemDblClick
            },
            "combobox#bankCombo": {
                select: this.onBankAccountComboboxSelect
            },
            "alreadyverifiedpaymentwin button#okBtn": {
                click: this.onOkTheVerifiedPaymentButtonClick
            }
        });
    }

});
