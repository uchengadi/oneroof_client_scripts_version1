/*
 * File: app/controller/UnverifiedSubscriptionPaymentController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('cobuy.controller.UnverifiedSubscriptionPaymentController', {
    extend: 'Ext.app.Controller',

    models: [
        'SubscriptionPayment'
    ],
    stores: [
        'UnverifiedSubscriptionPayments'
    ],
    views: [
        'UnverifiedSubscriptionMainpanel',
        'ConfirmUnverifiedSubscriptionPaymentWin'
    ],

    refs: [
        {
            ref: 'allUnverifiedSubscriptionPaymentGrid',
            selector: 'unverifiedsubscriptionmainpanel grid'
        }
    ],

    onUnverifiedPaymentButtonClick: function(button, e, eOpts) {
        var grid = this.getAllUnverifiedSubscriptionPaymentGrid(),
        		record = grid.getSelectionModel().getSelection();



            if(record[0]) {
              var editWin = Ext.create('cobuy.view.ConfirmUnverifiedSubscriptionPaymentWin');
        	  var form = editWin.down('form');


        			Ext.Ajax.request({

        				 url: '/cobuy/index.php?r=SubscriptionPayment/retrievePaymentDetailsForUpdate',
        			     params: {
        					id: record[0].get('id'),
                            member_id:record[0].get('member_id'),
                             bank_account_id:record[0].get('bank_account_id')
        				},
                     //success or failure
        				success: function(response){
        				var jsonResponse = Ext.decode(response.responseText);
        					if (jsonResponse.success) {

                                var bank_account = jsonResponse.bank_number;
                                var membership_type = jsonResponse.membership_type;
                                var member=jsonResponse.member;
                                var membership_number=jsonResponse.membership_number;


        					}

        					var values = {

                                bank_account:bank_account,
                                membership_type:membership_type,
                                member:member,
                                membership_number:membership_number,
                                amount_for_display:Ext.util.Format.number(record[0].get('amount'),'0,000.00'),
                                discounted_amount_for_display:Ext.util.Format.number(record[0].get('discounted_amount'),'0,000.00'),
                                net_amount_for_display:Ext.util.Format.number(record[0].get('net_amount'),'0,000.00')


        					};


        					form.loadRecord(record[0]);

        					form.getForm().setValues(values);


        				}




        			});


        			editWin.show();
        		} else {
        				Ext.Msg.alert('Error!', 'Please Select a Subscription Payment to edit');
        		}







    },

    onSaveThisConfirmedUnverifiedSubscriptionPaymentButtonClick: function(button, e, eOpts) {
        var win = button.up('window'),
        			formPanel = win.down('form'),
        			store = this.getAllUnverifiedSubscriptionPaymentGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
        					url: '/cobuy/index.php?r=SubscriptionPayment/confirmThisSubscriptionPayment',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							store.load();

        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
    },

    onUnverifiedSubscriptionPanelRender: function(component, eOpts) {
        component.down('grid').getStore().load();
    },

    onUnverifiedSubscriptionPaymentGridpanelItemDblClick: function(dataview, record, item, index, e, eOpts) {
        this.onUnverifiedPaymentButtonClick();
    },

    onSaveFailedSubscriptionPaymentButtonClick: function(button, e, eOpts) {
        var win = button.up('window'),
        			formPanel = win.down('form'),
        			store = this.getAllUnverifiedSubscriptionPaymentGrid().getStore();

        			if(formPanel.getForm().isValid()){
        				formPanel.getForm().submit({
        					clientValidation: true,
        					url: '/cobuy/index.php?r=SubscriptionPayment/failThisSubscriptionPayment',
                           //success or failure
        					success: function(form, action) {
        						var result = action.result;
        						if(result.success) {
        							Ext.Msg.alert('Success!', result.msg);
                                    //Ext.Msg.alert('Success!', 'New  Group Information Saved.');
        							//store.load();
        							store.load();

        							win.close();
        						} else {
        							Ext.Msg.alert(result.msg);
        						}
        					},
        					failure: function(form, action) {
        						var result = action.result;
                                switch(action.failureType) {
        							case Ext.form.action.Action.CLIENT_INVALID:
        							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
        							break;
        							case Ext.form.action.Action.CONNECT_FAILURE:
        							Ext.Msg.alert('Failure', 'Ajax communication failed');
        							break;
        							case Ext.form.action.Action.SERVER_INVALID:
        								Ext.Msg.alert('Failure', result.msg);
        						}
        					}
        				});
        			}
    },

    init: function(application) {
        this.control({
            "unverifiedsubscriptionmainpanel button#confirmBtn": {
                click: this.onUnverifiedPaymentButtonClick
            },
            "confirmunverifiedsubscriptionpaymentwin button#confirmPaymentBtn": {
                click: this.onSaveThisConfirmedUnverifiedSubscriptionPaymentButtonClick
            },
            "unverifiedsubscriptionmainpanel": {
                render: this.onUnverifiedSubscriptionPanelRender
            },
            "unverifiedsubscriptionmainpanel grid": {
                itemdblclick: this.onUnverifiedSubscriptionPaymentGridpanelItemDblClick
            },
            "confirmunverifiedsubscriptionpaymentwin button#failpaymentBtn": {
                click: this.onSaveFailedSubscriptionPaymentButtonClick
            }
        });
    }

});
